{"version":3,"file":"index.esm.js","sources":["../src/extension.js","../src/index.js"],"sourcesContent":["import axios, { isAxiosError } from \"axios\";\r\n\r\nexport function sendRequest(url, data = \"{}\", method = \"get\", headers = {}) {\r\n    let config = {\r\n      method: method,\r\n      maxBodyLength: Infinity,\r\n      url: url,\r\n      headers: headers,\r\n      data: data,\r\n    };\r\n  \r\n    return axios\r\n      .request(config)\r\n      .then((response) => {\r\n        return response.data;\r\n      })\r\n      .catch((error) => {\r\n        return {\r\n          error: true,\r\n          msg: error,\r\n        };\r\n      });\r\n  }\r\n  ","import axios, { isAxiosError } from \"axios\";\r\nimport { sendRequest } from \"./extension.js\";\r\n\r\n\r\n/**\r\n * This function fetches data from an API and returns an array of countries.\r\n *\r\n * @param {boolean} flag Need flag of country or not.\r\n * @param {boolean} currency Need currency of country or not.\r\n * @param {boolean} dialCode Need dial code of country or not.\r\n * @returns {Promise<object>} A Promise that resolves to an array of countries fetched from the API.\r\n */\r\nexport async function getAllCountries(flag, currency, dialCode) {\r\n  const moreInfo = [];\r\n  const countries = [];\r\n\r\n  flag && moreInfo.push(\"flag\");\r\n  currency && moreInfo.push(\"currency\");\r\n  dialCode && moreInfo.push(\"dialCode\");\r\n\r\n  let url =\r\n    moreInfo.length > 0\r\n      ? `https://countriesnow.space/api/v0.1/countries/info?returns=${moreInfo.join(\r\n          \",\"\r\n        )}`\r\n      : \"https://countriesnow.space/api/v0.1/countries/positions\";\r\n\r\n  const response = await sendRequest(url);\r\n\r\n  if (!response.error) {\r\n    if (moreInfo.length == 0) {\r\n      for (let country of response.data) {\r\n        countries.push(country[\"name\"]);\r\n      }\r\n      return countries;\r\n    } else {\r\n      return response.data;\r\n    }\r\n  } else {\r\n    return {\r\n      error: true,\r\n      msg: response.msg,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * This function returns an array of country name and capitals.\r\n * \r\n * @param {string} country Country name if you want to get capital of a specific country\r\n * @returns {Promise<object>} A promise that resolves to an array of country name, country capital and iso2&3\r\n */\r\nexport async function getAllCapitals(country) {\r\n  if (country && country !== \"\") {\r\n    let data = JSON.stringify({\r\n      country: country,\r\n    });\r\n    let headers = {\r\n      \"Content-Type\": \"application/json\",\r\n    };\r\n    let url = \"https://countriesnow.space/api/v0.1/countries/capital\";\r\n\r\n    const response = await sendRequest(url, data, \"post\", headers);\r\n\r\n    if (!response.error) {\r\n      return response.data;\r\n    } else {\r\n      if (\r\n        isAxiosError(response.msg) &&\r\n        response.msg.response &&\r\n        response.msg.response.status == 404\r\n      ) {\r\n        return {\r\n          error: true,\r\n          msg: `Country ${country} is not exist!`,\r\n        };\r\n      }\r\n    }\r\n  } else {\r\n    let url = \"https://countriesnow.space/api/v0.1/countries/capital\";\r\n\r\n    const response = await sendRequest(url);\r\n\r\n    if (!response.error) {\r\n      return response.data;\r\n    } else {\r\n      return {\r\n        error: true,\r\n        msg: response.msg,\r\n      };\r\n    }\r\n  }\r\n}"],"names":["sendRequest","url","data","method","headers","axios","request","maxBodyLength","Infinity","then","response","error","msg","getAllCapitals","country","Promise","resolve","JSON","stringify","isAxiosError","status","e","reject","getAllCountries","flag","currency","dialCode","moreInfo","countries","push","length","join","_iterator","_step","_createForOfIteratorHelperLoose","done","value"],"mappings":"8IAEO,SAASA,EAAYC,EAAKC,EAAaC,EAAgBC,GAS1D,YATiC,IAAJF,IAAAA,EAAO,eAAMC,IAAAA,EAAS,YAAOC,IAAAA,IAAAA,EAAU,CAAA,GAS7DC,EACJC,QATU,CACXH,OAAQA,EACRI,cAAeC,SACfP,IAAKA,EACLG,QAASA,EACTF,KAAMA,IAKLO,KAAK,SAACC,GACL,OAAOA,EAASR,IAClB,GAAE,MACK,SAACS,GACN,MAAO,CACLA,OAAO,EACPC,IAAKD,EAET,EACJ,CC8BoB,IAAAE,EAAc,SAACC,GAAO,WAAEC,QAAAC,QACxCF,WAAAA,GAAAA,GAAuB,KAAZA,EAAc,CAC3B,IAAIZ,EAAOe,KAAKC,UAAU,CACxBJ,QAASA,IAKuD,OAAAC,QAAAC,QAE3ChB,EAFb,wDAE8BE,EAAM,OALhC,CACZ,eAAgB,sBAI4CO,KAAxDC,SAAAA,UAEDA,EAASC,MAIVQ,EAAaT,EAASE,MACtBF,EAASE,IAAIF,UACmB,KAAhCA,EAASE,IAAIF,SAASU,OAEf,CACLT,OAAO,EACPC,IAAgBE,WAAAA,2BATbJ,EAASR,IAUZ,EAAA,CAI4D,OAAAa,QAAAC,QAE3ChB,EAFb,0DAE6BS,KAAjCC,SAAAA,UAEDA,EAASC,MAGL,CACLA,OAAO,EACPC,IAAKF,EAASE,KAJTF,EAASR,IAKd,EAAA,CApCFY,GAuCN,CAAC,MAAAO,GAAAN,OAAAA,QAAAO,OAAAD,EAAA,CAAA,EAhFqBE,EAAA,SAAgBC,EAAMC,EAAUC,GAAQ,IAC5D,IAAMC,EAAW,GACXC,EAAY,GAElBJ,GAAQG,EAASE,KAAK,QACtBJ,GAAYE,EAASE,KAAK,YAC1BH,GAAYC,EAASE,KAAK,YAE1B,IAAI5B,EACF0B,EAASG,OAAS,EAAC,8DAC+CH,EAASI,KACrE,KAEF,0DAA0D,OAAAhB,QAAAC,QAEzChB,EAAYC,IAAIQ,KAAjCC,SAAAA,MAEDA,EAASC,MAUZ,MAAO,CACLA,OAAO,EACPC,IAAKF,EAASE,QAXO,GAAnBe,EAASG,QACX,IAAAE,IAAiCC,EAAjCD,6pBAAAE,CAAoBxB,EAASR,QAAI+B,EAAAD,KAAAG,MAC/BP,EAAUC,KADII,EAAAG,MACe,MAE/B,OAAOR,CAAU,CAEjB,OAAOlB,EAASR,IAQtB,EAAA,CAAC,MAAAmB,GAAA,OAAAN,QAAAO,OAAAD,EAAA,CAAA"}
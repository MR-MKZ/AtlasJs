{"version":3,"file":"index.esm.js","sources":["../src/extension.js","../src/index.js"],"sourcesContent":["import axios, { isAxiosError } from \"axios\";\r\nimport { promises as fsPromises } from \"fs\";\r\n\r\nexport function sendRequest(url, data = \"{}\", method = \"get\", headers = {}) {\r\n  let config = {\r\n    method: method,\r\n    maxBodyLength: Infinity,\r\n    url: url,\r\n    headers: headers,\r\n    data: data,\r\n  };\r\n\r\n  return axios\r\n    .request(config)\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch((error) => {\r\n      return {\r\n        error: true,\r\n        msg: error,\r\n      };\r\n    });\r\n}\r\n\r\nexport class AtlasFileReader {\r\n  constructor() {}\r\n\r\n  async getRegions() {\r\n    try {\r\n      const data = await fsPromises.readFile(\"./assets/regions.json\", \"utf8\");\r\n      return JSON.parse(data);\r\n    } catch (err) {\r\n      console.error(\"Error reading JSON file:\", err);\r\n      return;\r\n    }\r\n  }\r\n\r\n  async getRegionByName(regName) {\r\n    try {\r\n      if (isNaN(Number(regName))) {\r\n        const data = await fsPromises.readFile(\"./assets/regions.json\", \"utf8\");\r\n        for (const region of JSON.parse(data)) {\r\n          if (region.name.toLowerCase() === regName.toLowerCase()) {\r\n            return region;\r\n          }\r\n        }\r\n        console.error(`Region ${regName} not found`);\r\n        return;\r\n      } else {\r\n        console.error(\"Error finding region: region name can not be Number\");\r\n        return;\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error reading JSON file:\", err);\r\n      return;\r\n    }\r\n  }\r\n\r\n  async getSubRegion(regionId) {\r\n    let subregions = [];\r\n    try {\r\n      const data = await fsPromises.readFile(\r\n        \"./assets/subregions.json\",\r\n        \"utf8\"\r\n      );\r\n      for (const subregion of JSON.parse(data)) {\r\n        if (subregion[\"region_id\"] == regionId) {\r\n          subregions.push(subregion);\r\n        }\r\n      }\r\n      if (subregions.length == 0) {\r\n        console.error(`Subregion with region id ${regionId} not found`);\r\n        return;\r\n      } else {\r\n        return subregions;\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error reading JSON file:\", err);\r\n      return;\r\n    }\r\n  }\r\n}\r\n","import axios, { isAxiosError } from \"axios\";\r\nimport { sendRequest, AtlasFileReader } from \"./extension.js\";\r\n\r\nconst atlasFileReader = new AtlasFileReader();\r\n\r\n/**\r\n * This function returns and object that contains list of all regions.\r\n *\r\n * @returns {Promise<object>} A Promise that resolves to an array of regions.\r\n */\r\nexport async function getAllRegions() {\r\n  try {\r\n    const regions = await atlasFileReader.getRegions();\r\n    return regions;\r\n  } catch (error) {\r\n    console.error(\"Error getting regions: \", error);\r\n    return;\r\n  }\r\n}\r\n\r\n/**\r\n * This function return subregions of a region.\r\n * \r\n * @param {string} region region name to get subregions.\r\n * @returns {Promise<object>} A Promise that resolves to an array of subregions of entered region.\r\n */\r\nexport async function getSubRegions(region) {\r\n  if (region && region !== \"\") {\r\n    try {\r\n      const findedRegion = await atlasFileReader.getRegionByName(region);\r\n      if (findedRegion != undefined) {\r\n        let regionId = findedRegion.id;\r\n        const subregion = await atlasFileReader.getSubRegion(regionId);\r\n        if (subregion != undefined) {\r\n          return subregion;\r\n        } else {\r\n          return;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error getting subregions: \", error);\r\n      return;\r\n    }\r\n  } else {\r\n    console.error(\"Error getting subregions: region name is required!\");\r\n    return;\r\n  }\r\n}\r\n\r\n/**\r\n * This function fetches data from an API and returns an array of countries.\r\n *\r\n * @param {boolean} flag Need flag of country or not.\r\n * @param {boolean} currency Need currency of country or not.\r\n * @param {boolean} dialCode Need dial code of country or not.\r\n * @returns {Promise<object>} A Promise that resolves to an array of countries fetched from the API.\r\n */\r\nexport async function getAllCountries(flag, currency, dialCode) {\r\n  const moreInfo = [];\r\n  const countries = [];\r\n\r\n  flag && moreInfo.push(\"flag\");\r\n  currency && moreInfo.push(\"currency\");\r\n  dialCode && moreInfo.push(\"dialCode\");\r\n\r\n  let url =\r\n    moreInfo.length > 0\r\n      ? `https://countriesnow.space/api/v0.1/countries/info?returns=${moreInfo.join(\r\n          \",\"\r\n        )}`\r\n      : \"https://countriesnow.space/api/v0.1/countries/positions\";\r\n\r\n  const response = await sendRequest(url);\r\n\r\n  if (!response.error) {\r\n    if (moreInfo.length == 0) {\r\n      for (let country of response.data) {\r\n        countries.push(country[\"name\"]);\r\n      }\r\n      return countries;\r\n    } else {\r\n      return response.data;\r\n    }\r\n  } else {\r\n    return {\r\n      error: true,\r\n      msg: response.msg,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * This function returns an array of country name and capitals.\r\n *\r\n * @param {string} country Country name if you want to get capital of a specific country\r\n * @returns {Promise<object>} A promise that resolves to an array of country name, country capital and iso2&3\r\n */\r\nexport async function getAllCapitals(country) {\r\n  if (country && country !== \"\") {\r\n    let data = JSON.stringify({\r\n      country: country,\r\n    });\r\n    let headers = {\r\n      \"Content-Type\": \"application/json\",\r\n    };\r\n    let url = \"https://countriesnow.space/api/v0.1/countries/capital\";\r\n\r\n    const response = await sendRequest(url, data, \"post\", headers);\r\n\r\n    if (!response.error) {\r\n      return response.data;\r\n    } else {\r\n      if (\r\n        isAxiosError(response.msg) &&\r\n        response.msg.response &&\r\n        response.msg.response.status == 404\r\n      ) {\r\n        return {\r\n          error: true,\r\n          msg: `Country ${country} is not exist!`,\r\n        };\r\n      }\r\n    }\r\n  } else {\r\n    let url = \"https://countriesnow.space/api/v0.1/countries/capital\";\r\n\r\n    const response = await sendRequest(url);\r\n\r\n    if (!response.error) {\r\n      return response.data;\r\n    } else {\r\n      return {\r\n        error: true,\r\n        msg: response.msg,\r\n      };\r\n    }\r\n  }\r\n}\r\n"],"names":["_catch","body","recover","result","e","then","sendRequest","url","data","method","headers","axios","request","maxBodyLength","Infinity","response","error","msg","getAllCapitals","country","Promise","resolve","JSON","stringify","isAxiosError","status","reject","getAllCountries","flag","currency","dialCode","moreInfo","countries","push","length","join","_step","_iterator","_createForOfIteratorHelperLoose","done","value","getSubRegions","region","atlasFileReader","getRegionByName","findedRegion","undefined","getSubRegion","id","subregion","console","getAllRegions","getRegions","AtlasFileReader","_proto","prototype","fsPromises","readFile","parse","err","regName","isNaN","Number","name","toLowerCase","regionId","subregions","_iterator2","_step2"],"mappings":"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"}
{"version":3,"file":"index.esm.js","sources":["../src/extension.js","../src/index.js"],"sourcesContent":["import axios, { isAxiosError } from \"axios\";\r\nimport { promises as fsPromises } from \"fs\";\r\n\r\nexport function sendRequest(url, data = \"{}\", method = \"get\", headers = {}) {\r\n  let config = {\r\n    method: method,\r\n    maxBodyLength: Infinity,\r\n    url: url,\r\n    headers: headers,\r\n    data: data,\r\n  };\r\n\r\n  return axios\r\n    .request(config)\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch((error) => {\r\n      return {\r\n        error: true,\r\n        msg: error,\r\n      };\r\n    });\r\n}\r\n\r\nexport class AtlasFileReader {\r\n  constructor() {}\r\n\r\n  async getRegions() {\r\n    try {\r\n      const data = await fsPromises.readFile(\"./assets/regions.json\", \"utf8\");\r\n      return JSON.parse(data);\r\n    } catch (err) {\r\n      console.error(\"Error reading JSON file:\", err);\r\n      return;\r\n    }\r\n  }\r\n\r\n  async getRegionByName(regName) {\r\n    try {\r\n      if (isNaN(Number(regName))) {\r\n        const data = await fsPromises.readFile(\"./assets/regions.json\", \"utf8\");\r\n        for (const region of JSON.parse(data)) {\r\n          if (region.name.toLowerCase() === regName.toLowerCase()) {\r\n            return region;\r\n          }\r\n        }\r\n        console.error(`Region ${regName} not found`);\r\n        return;\r\n      } else {\r\n        console.error(\"Error finding region: region name can not be Number\");\r\n        return;\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error reading JSON file:\", err);\r\n      return;\r\n    }\r\n  }\r\n\r\n  async getSubRegion(regionId) {\r\n    let subregions = [];\r\n    try {\r\n      const data = await fsPromises.readFile(\r\n        \"./assets/subregions.json\",\r\n        \"utf8\"\r\n      );\r\n      for (const subregion of JSON.parse(data)) {\r\n        if (subregion[\"region_id\"] == regionId) {\r\n          subregions.push(subregion);\r\n        }\r\n      }\r\n      if (subregions.length == 0) {\r\n        console.error(`Subregion with region id ${regionId} not found`);\r\n        return;\r\n      } else {\r\n        return subregions;\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error reading JSON file:\", err);\r\n      return;\r\n    }\r\n  }\r\n\r\n  async getCountries(\r\n    currency,\r\n    dialCode,\r\n    native,\r\n    nationality,\r\n    region,\r\n    subregion,\r\n    translations,\r\n    timezones,\r\n    geolocation,\r\n    emojies,\r\n    domain\r\n  ) {\r\n    try {\r\n      let countries = [];\r\n      const data = await fsPromises.readFile(\r\n        \"./assets/countries_states_cities.json\",\r\n        \"utf8\"\r\n      );\r\n      for (const country of JSON.parse(data)) {\r\n        let countryObj = {};\r\n        countryObj[\"id\"] = country[\"id\"];\r\n        countryObj[\"name\"] = country[\"name\"];\r\n        countryObj[\"iso2\"] = country[\"iso2\"];\r\n        countryObj[\"iso3\"] = country[\"iso3\"];\r\n        countryObj[\"capital\"] = country[\"capital\"];\r\n        if (dialCode) countryObj[\"phone_code\"] = country[\"phone_code\"];\r\n        if (currency) {\r\n          countryObj[\"currency\"] = country[\"currency\"];\r\n          countryObj[\"currency_name\"] = country[\"currency_name\"];\r\n          countryObj[\"currency_symbol\"] = country[\"currency_symbol\"];\r\n        }\r\n        if (domain) countryObj[\"domain\"] = country[\"tld\"];\r\n        if (native) countryObj[\"native\"] = country[\"native\"];\r\n        if (nationality) countryObj[\"nationality\"] = country[\"nationality\"];\r\n        if (region) {\r\n          countryObj[\"region\"] = country[\"region\"];\r\n          countryObj[\"region_id\"] = country[\"region_id\"];\r\n        }\r\n        if (subregion) {\r\n          countryObj[\"subregion\"] = country[\"subregion\"];\r\n          countryObj[\"subregion_id\"] = country[\"subregion_id\"];\r\n        }\r\n        if (translations) countryObj[\"translations\"] = country[\"translations\"];\r\n\r\n        if (timezones) countryObj[\"timezones\"] = country[\"timezones\"];\r\n\r\n        if (geolocation) {\r\n          countryObj[\"latitude\"] = country[\"latitude\"];\r\n          countryObj[\"longitude\"] = country[\"longitude\"];\r\n        }\r\n\r\n        if (emojies) {\r\n          countryObj[\"emoji\"] = country[\"emoji\"];\r\n          countryObj[\"emojiU\"] = country[\"emojiU\"];\r\n        }\r\n        countries.push(countryObj);\r\n      }\r\n      return countries;\r\n    } catch (err) {\r\n      console.error(\"Error getting countries:\", err);\r\n      return;\r\n    }\r\n  }\r\n}\r\n","import axios, { isAxiosError } from \"axios\";\r\nimport { sendRequest, AtlasFileReader } from \"./extension.js\";\r\n\r\nconst atlasFileReader = new AtlasFileReader();\r\n\r\n/**\r\n * This function returns and object that contains list of all regions.\r\n *\r\n * @returns {Promise<object>} A Promise that resolves to an array of regions.\r\n */\r\nexport async function getAllRegions() {\r\n  try {\r\n    const regions = await atlasFileReader.getRegions();\r\n    return regions;\r\n  } catch (error) {\r\n    console.error(\"Error requesting regions: \", error);\r\n    return;\r\n  }\r\n}\r\n\r\n/**\r\n * This function return subregions of a region.\r\n *\r\n * @param {string} region region name to get subregions.\r\n * @returns {Promise<object>} A Promise that resolves to an array of subregions of entered region.\r\n */\r\nexport async function getSubRegions(region) {\r\n  if (region && region !== \"\") {\r\n    try {\r\n      const findedRegion = await atlasFileReader.getRegionByName(region);\r\n      if (findedRegion != undefined) {\r\n        let regionId = findedRegion.id;\r\n        const subregion = await atlasFileReader.getSubRegion(regionId);\r\n        if (subregion != undefined) {\r\n          return subregion;\r\n        } else {\r\n          return;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error requesting subregions: \", error);\r\n      return;\r\n    }\r\n  } else {\r\n    console.error(\"Error requesting subregions: region name is required!\");\r\n    return;\r\n  }\r\n}\r\n\r\n/**\r\n * This function gives you list of countries with some special informations.\r\n * \r\n * @param {boolean} currency do you want currency of country?\r\n * @param {boolean} dialCode do you want dial code of country?\r\n * @param {boolean} native do you want native of country?\r\n * @param {boolean} nationality do you want nationality of country?\r\n * @param {boolean} region do you want region of country?\r\n * @param {boolean} subregion do you want subregion of country?\r\n * @param {boolean} translations do you want translations of country?\r\n * @param {boolean} timezones do you want timezones of country?\r\n * @param {boolean} geolocation do you want geolocation of country?\r\n * @param {boolean} emojies do you want emojies of country?\r\n * @param {boolean} domain do you want domain of country?\r\n * @returns {Promise<object>} A Promise that resolves to an array of countries with some special informations if you want.\r\n */\r\nexport async function getAllCountries(\r\n  currency,\r\n  dialCode,\r\n  native,\r\n  nationality,\r\n  region,\r\n  subregion,\r\n  translations,\r\n  timezones,\r\n  geolocation,\r\n  emojies,\r\n  domain\r\n) {\r\n  try {\r\n    const countries = await atlasFileReader.getCountries(\r\n      currency,\r\n      dialCode,\r\n      native,\r\n      nationality,\r\n      region,\r\n      subregion,\r\n      translations,\r\n      timezones,\r\n      geolocation,\r\n      emojies,\r\n      domain\r\n    );\r\n    if (countries != undefined) {\r\n      return countries;\r\n    } else {\r\n      return;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error requesting countries: \", error);\r\n  }\r\n}\r\n\r\n/**\r\n * This function returns an array of country name and capitals.\r\n *\r\n * @param {string} country Country name if you want to get capital of a specific country\r\n * @returns {Promise<object>} A promise that resolves to an array of country name, country capital and iso2&3\r\n */\r\nexport async function getAllCapitals(country) {\r\n  if (country && country !== \"\") {\r\n    let data = JSON.stringify({\r\n      country: country,\r\n    });\r\n    let headers = {\r\n      \"Content-Type\": \"application/json\",\r\n    };\r\n    let url = \"https://countriesnow.space/api/v0.1/countries/capital\";\r\n\r\n    const response = await sendRequest(url, data, \"post\", headers);\r\n\r\n    if (!response.error) {\r\n      return response.data;\r\n    } else {\r\n      if (\r\n        isAxiosError(response.msg) &&\r\n        response.msg.response &&\r\n        response.msg.response.status == 404\r\n      ) {\r\n        return {\r\n          error: true,\r\n          msg: `Country ${country} is not exist!`,\r\n        };\r\n      }\r\n    }\r\n  } else {\r\n    let url = \"https://countriesnow.space/api/v0.1/countries/capital\";\r\n\r\n    const response = await sendRequest(url);\r\n\r\n    if (!response.error) {\r\n      return response.data;\r\n    } else {\r\n      return {\r\n        error: true,\r\n        msg: response.msg,\r\n      };\r\n    }\r\n  }\r\n}\r\n"],"names":["sendRequest","url","data","method","headers","axios","request","maxBodyLength","Infinity","then","response","catch","error","msg","atlasFileReader","constructor","getRegions","fsPromises","readFile","JSON","parse","err","console","getRegionByName","regName","isNaN","Number","region","name","toLowerCase","getSubRegion","regionId","subregions","subregion","push","length","getCountries","currency","dialCode","native","nationality","translations","timezones","geolocation","emojies","domain","countries","country","countryObj","async","getAllRegions","getSubRegions","findedRegion","undefined","id","getAllCountries","getAllCapitals","stringify","isAxiosError","status"],"mappings":"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"}
{"version":3,"file":"index.esm.js","sources":["../src/index.js","../src/extension.js"],"sourcesContent":["import { sendRequest, AtlasFileReader } from \"./extension.js\";\r\n\r\nconst atlasFileReader = new AtlasFileReader();\r\n\r\n/**\r\n * This function returns and object that contains list of all regions.\r\n *\r\n * @returns {Promise<object>} A Promise that resolves to an array of regions.\r\n */\r\nexport async function getAllRegions() {\r\n  try {\r\n    const regions = await atlasFileReader.getRegions();\r\n    return regions;\r\n  } catch (error) {\r\n    console.error(\"Error requesting regions: \", error);\r\n    return;\r\n  }\r\n}\r\n\r\n/**\r\n * This function return subregions of a region.\r\n *\r\n * @param {string} region region name to get subregions.\r\n * @returns {Promise<object>} A Promise that resolves to an array of subregions of entered region.\r\n */\r\nexport async function getSubRegions(region) {\r\n  if (region && region !== \"\") {\r\n    try {\r\n      const findedRegion = await atlasFileReader.getRegionByName(region);\r\n      if (findedRegion != undefined) {\r\n        let regionId = findedRegion.id;\r\n        const subregion = await atlasFileReader.getSubRegion(regionId);\r\n        if (subregion != undefined) {\r\n          return subregion;\r\n        } else {\r\n          return;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error requesting subregions: \", error);\r\n      return;\r\n    }\r\n  } else {\r\n    console.error(\"Error requesting subregions: region name is required!\");\r\n    return;\r\n  }\r\n}\r\n\r\n/**\r\n * This function gives you list of countries with some special informations.\r\n *\r\n * @param {boolean} currency do you want currency of country?\r\n * @param {boolean} dialCode do you want dial code of country?\r\n * @param {boolean} native do you want native of country?\r\n * @param {boolean} nationality do you want nationality of country?\r\n * @param {boolean} region do you want region of country?\r\n * @param {boolean} subregion do you want subregion of country?\r\n * @param {boolean} translations do you want translations of country?\r\n * @param {boolean} timezones do you want timezones of country?\r\n * @param {boolean} geolocation do you want geolocation of country?\r\n * @param {boolean} emojies do you want emojies of country?\r\n * @param {boolean} domain do you want domain of country?\r\n * @returns {Promise<object>} A Promise that resolves to an array of countries with some special informations if you want.\r\n */\r\nexport async function getAllCountries(\r\n  currency,\r\n  dialCode,\r\n  native,\r\n  nationality,\r\n  region,\r\n  subregion,\r\n  translations,\r\n  timezones,\r\n  geolocation,\r\n  emojies,\r\n  domain\r\n) {\r\n  try {\r\n    const countries = await atlasFileReader.getCountries(\r\n      currency,\r\n      dialCode,\r\n      native,\r\n      nationality,\r\n      region,\r\n      subregion,\r\n      translations,\r\n      timezones,\r\n      geolocation,\r\n      emojies,\r\n      domain\r\n    );\r\n    if (countries != undefined) {\r\n      return countries;\r\n    } else {\r\n      return;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error requesting countries: \", error);\r\n  }\r\n}\r\n\r\n/**\r\n * This function gives you states of a country.\r\n *\r\n * @param {string} country country name to get states\r\n * @param {string} iso3 country iso3 to get states\r\n * @param {string} iso2 country iso2 to get states\r\n * @param {boolean} geolocation do you want geolocation of each country state?\r\n * @returns {Promise<object>} A Promise that resolves to an array of country states with some special informations if you want.\r\n */\r\nexport async function getCountryStates(country, iso3, iso2, geolocation) {\r\n  if (\r\n    (country && country != \"\") ||\r\n    (iso3 && iso3 != \"\") ||\r\n    (iso2 && iso2 != \"\")\r\n  ) {\r\n    try {\r\n      if (country != null && country != undefined) {\r\n        country = country.toString();\r\n      }\r\n      if (iso3 != null && iso3 != undefined) {\r\n        iso3 = iso3.toString();\r\n      }\r\n      if (iso2 != null && iso2 != undefined) {\r\n        iso2 = iso2.toString();\r\n      }\r\n      const states = await atlasFileReader.getStates(\r\n        country,\r\n        iso3,\r\n        iso2,\r\n        geolocation\r\n      );\r\n      if (states != undefined) {\r\n        return states;\r\n      } else {\r\n        return;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error requesting country states: \", error);\r\n    }\r\n  } else {\r\n    console.error(\r\n      \"Error requesting country states: country name is required! please enter country name, iso3 or iso2\"\r\n    );\r\n    return;\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nimport { promises as fsPromises } from \"fs\";\r\n\r\nexport function sendRequest(url, data = \"{}\", method = \"get\", headers = {}) {\r\n  let config = {\r\n    method: method,\r\n    maxBodyLength: Infinity,\r\n    url: url,\r\n    headers: headers,\r\n    data: data,\r\n  };\r\n\r\n  return axios\r\n    .request(config)\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch((error) => {\r\n      return {\r\n        error: true,\r\n        msg: error,\r\n      };\r\n    });\r\n}\r\n\r\nexport class AtlasFileReader {\r\n  constructor() {}\r\n\r\n  async getRegions() {\r\n    try {\r\n      const data = await fsPromises.readFile(\"./assets/regions.json\", \"utf8\");\r\n      return JSON.parse(data);\r\n    } catch (err) {\r\n      console.error(\"Error reading JSON file:\", err);\r\n      return;\r\n    }\r\n  }\r\n\r\n  async getRegionByName(regName) {\r\n    try {\r\n      if (isNaN(Number(regName))) {\r\n        const data = await fsPromises.readFile(\"./assets/regions.json\", \"utf8\");\r\n        for (const region of JSON.parse(data)) {\r\n          if (region.name.toLowerCase() === regName.toLowerCase()) {\r\n            return region;\r\n          }\r\n        }\r\n        console.error(`Region ${regName} not found`);\r\n        return;\r\n      } else {\r\n        console.error(\r\n          \"Error finding region: region name can not be Number or Boolean\"\r\n        );\r\n        return;\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error reading JSON file:\", err);\r\n      return;\r\n    }\r\n  }\r\n\r\n  async getSubRegion(regionId) {\r\n    let subregions = [];\r\n    try {\r\n      const data = await fsPromises.readFile(\r\n        \"./assets/subregions.json\",\r\n        \"utf8\"\r\n      );\r\n      for (const subregion of JSON.parse(data)) {\r\n        if (subregion[\"region_id\"] == regionId) {\r\n          subregions.push(subregion);\r\n        }\r\n      }\r\n      if (subregions.length == 0) {\r\n        console.error(`Subregion with region id ${regionId} not found`);\r\n        return;\r\n      } else {\r\n        return subregions;\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error reading JSON file:\", err);\r\n      return;\r\n    }\r\n  }\r\n\r\n  async getCountries(\r\n    currency,\r\n    dialCode,\r\n    native,\r\n    nationality,\r\n    region,\r\n    subregion,\r\n    translations,\r\n    timezones,\r\n    geolocation,\r\n    emojies,\r\n    domain\r\n  ) {\r\n    try {\r\n      let countries = [];\r\n      const data = await fsPromises.readFile(\r\n        \"./assets/countries_states_cities.json\",\r\n        \"utf8\"\r\n      );\r\n      for (const country of JSON.parse(data)) {\r\n        let countryObj = {};\r\n        countryObj[\"id\"] = country[\"id\"];\r\n        countryObj[\"name\"] = country[\"name\"];\r\n        countryObj[\"iso2\"] = country[\"iso2\"];\r\n        countryObj[\"iso3\"] = country[\"iso3\"];\r\n        countryObj[\"capital\"] = country[\"capital\"];\r\n        if (dialCode) countryObj[\"phone_code\"] = country[\"phone_code\"];\r\n        if (currency) {\r\n          countryObj[\"currency\"] = country[\"currency\"];\r\n          countryObj[\"currency_name\"] = country[\"currency_name\"];\r\n          countryObj[\"currency_symbol\"] = country[\"currency_symbol\"];\r\n        }\r\n        if (domain) countryObj[\"domain\"] = country[\"tld\"];\r\n        if (native) countryObj[\"native\"] = country[\"native\"];\r\n        if (nationality) countryObj[\"nationality\"] = country[\"nationality\"];\r\n        if (region) {\r\n          countryObj[\"region\"] = country[\"region\"];\r\n          countryObj[\"region_id\"] = country[\"region_id\"];\r\n        }\r\n        if (subregion) {\r\n          countryObj[\"subregion\"] = country[\"subregion\"];\r\n          countryObj[\"subregion_id\"] = country[\"subregion_id\"];\r\n        }\r\n        if (translations) countryObj[\"translations\"] = country[\"translations\"];\r\n\r\n        if (timezones) countryObj[\"timezones\"] = country[\"timezones\"];\r\n\r\n        if (geolocation) {\r\n          countryObj[\"latitude\"] = country[\"latitude\"];\r\n          countryObj[\"longitude\"] = country[\"longitude\"];\r\n        }\r\n\r\n        if (emojies) {\r\n          countryObj[\"emoji\"] = country[\"emoji\"];\r\n          countryObj[\"emojiU\"] = country[\"emojiU\"];\r\n        }\r\n        countries.push(countryObj);\r\n      }\r\n      return countries;\r\n    } catch (err) {\r\n      console.error(\"Error getting countries:\", err);\r\n      return;\r\n    }\r\n  }\r\n\r\n  async getStates(countryName, iso3, iso2, geolocation) {\r\n    try {\r\n      if (\r\n        (countryName != undefined &&\r\n          countryName != null &&\r\n          isNaN(Number(countryName))) ||\r\n        (iso3 != undefined && iso3 != null && isNaN(Number(iso3))) ||\r\n        (iso2 != undefined && iso2 != null && isNaN(Number(iso2)))\r\n      ) {\r\n        let states = [];\r\n        const data = await fsPromises.readFile(\r\n          \"./assets/countries_states_cities.json\",\r\n          \"utf8\"\r\n        );\r\n        for (const country of JSON.parse(data)) {\r\n          if (\r\n            (countryName != undefined &&\r\n              countryName != null &&\r\n              country[\"name\"].toLowerCase() == countryName.toLowerCase()) ||\r\n            (iso3 != undefined &&\r\n              iso3 != null &&\r\n              country[\"iso3\"].toLowerCase() == iso3.toLowerCase()) ||\r\n            (iso2 != undefined &&\r\n              iso2 != null &&\r\n              country[\"iso2\"].toLowerCase() == iso2.toLowerCase())\r\n          ) {\r\n            for (const state of country[\"states\"]) {\r\n              let statesObj = {};\r\n              statesObj[\"id\"] = state[\"id\"];\r\n              statesObj[\"name\"] = state[\"name\"];\r\n              statesObj[\"state_code\"] = state[\"state_code\"];\r\n              if (geolocation) {\r\n                statesObj[\"latitude\"] = state[\"latitude\"];\r\n                statesObj[\"longitude\"] = state[\"longitude\"];\r\n              }\r\n              states.push(statesObj);\r\n            }\r\n          }\r\n        }\r\n        if (states.length == 0) {\r\n          console.error(`Country ${countryName} not found`);\r\n          return;\r\n        } else {\r\n          return states;\r\n        }\r\n      } else {\r\n        console.error(\r\n          `Error getting country state: country name can not be Number or Boolean`\r\n        );\r\n        return;\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error getting country states:\", err);\r\n      return;\r\n    }\r\n  }\r\n}\r\n"],"names":["atlasFileReader","constructor","getRegions","data","fsPromises","readFile","JSON","parse","err","console","error","getRegionByName","regName","isNaN","Number","region","name","toLowerCase","getSubRegion","regionId","subregions","subregion","push","length","getCountries","currency","dialCode","native","nationality","translations","timezones","geolocation","emojies","domain","countries","country","countryObj","getStates","countryName","iso3","iso2","undefined","states","state","statesObj","async","getAllRegions","getSubRegions","findedRegion","id","getAllCountries","getCountryStates","toString"],"mappings":"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"},IAA7BjD,EAAO4D,EAAAV,MACZW,EAAa,CAAA,EACjBA,EAAe,GAAI7D,EAAY,GAC/B6D,EAAiB,KAAI7D,EAAc,KACnC6D,EAAiB,KAAI7D,EAAc,KACnC6D,EAAiB,KAAI7D,EAAc,KACnC6D,EAAoB,QAAI7D,EAAiB,QACrCgB,IAAU6C,EAAuB,WAAI7D,EAAoB,YACzDe,IACF8C,EAAqB,SAAI7D,EAAkB,SAC3C6D,EAA0B,cAAI7D,EAAuB,cACrD6D,EAA4B,gBAAI7D,EAAyB,iBAEvDwB,IAAQqC,EAAmB,OAAI7D,EAAa,KAC5CiB,IAAQ4C,EAAmB,OAAI7D,EAAgB,QAC/CkB,IAAa2C,EAAwB,YAAI7D,EAAqB,aAC9DmB,IACF0C,EAAmB,OAAI7D,EAAgB,OACvC6D,EAAsB,UAAI7D,EAAmB,WAE3CoB,IACFyC,EAAsB,UAAI7D,EAAmB,UAC7C6D,EAAyB,aAAI7D,EAAsB,cAEjDqB,IAAcwC,EAAyB,aAAI7D,EAAsB,cAEjEsB,IAAWuC,EAAsB,UAAI7D,EAAmB,WAExDG,IACF0D,EAAqB,SAAI7D,EAAkB,SAC3C6D,EAAsB,UAAI7D,EAAmB,WAG3CuB,IACFsC,EAAkB,MAAI7D,EAAe,MACrC6D,EAAmB,OAAI7D,EAAgB,QAEzC0B,EAAU+B,KAAKI,EACjB,CACA,OAAOnC,CAAU,EACnB,EAAC,SAAQe,GACP7B,QAAQD,MAAM,2BAA4B8B,EAE5C,GACF,CAAC,MAAA5C,GAAA,OAAAO,QAAAS,OAAAhB,EAAA,CAAA,EAAAsC,EAEK1B,UAASA,SAACqD,EAAa7D,EAAMC,EAAMC,GAAW,IAAEC,OAAAA,QAAAC,QAAAZ,EAAA,cAGhCa,MAAfwD,GACgB,MAAfA,GACAnB,MAAMC,OAAOkB,KACNxD,MAARL,GAA6B,MAARA,GAAgB0C,MAAMC,OAAO3C,KAC1CK,MAARJ,GAA6B,MAARA,GAAgByC,MAAMC,OAAO1C,KAEnD,IAAIQ,EAAS,GAAG,OAAAN,QAAAC,QACGgC,EAAWC,SAC5B,wCACA,SACDxC,KAHK+C,SAAAA,GAIN,IAAA,IAAsCkB,EAAtCC,EAAAhB,EAAsBT,KAAKC,MAAMK,MAAKkB,EAAAC,KAAAf,MAAE,CAA7B,IAAAjD,EAAO+D,EAAAb,MAChB,GACkB5C,MAAfwD,GACgB,MAAfA,GACA9D,EAAc,KAAEoD,eAAiBU,EAAYV,eACtC9C,MAARL,GACS,MAARA,GACAD,EAAc,KAAEoD,eAAiBnD,EAAKmD,eAC/B9C,MAARJ,GACS,MAARA,GACAF,EAAc,KAAEoD,eAAiBlD,EAAKkD,cAExC,QAAqCa,EAArCC,EAAAlB,EAAoBhD,EAAgB,UAACiE,EAAAC,KAAAjB,MAAE,CAAA,IAA5BkB,EAAKF,EAAAf,MACVkB,EAAY,GAChBA,EAAc,GAAID,EAAU,GAC5BC,EAAgB,KAAID,EAAY,KAChCC,EAAsB,WAAID,EAAkB,WACxChE,IACFiE,EAAoB,SAAID,EAAgB,SACxCC,EAAqB,UAAID,EAAiB,WAE5CzD,EAAO+C,KAAKW,EACd,CAEJ,CAAC,GACoB,GAAjB1D,EAAOgD,OAIT,OAAOhD,EAHPE,QAAQD,iBAAiBmD,EAAW,aAGtB,EAAA,CAGhBlD,QAAQD,MAER,yEAGJ,EAAC,SAAQ8B,GACP7B,QAAQD,MAAM,gCAAiC8B,EAEjD,GACF,CAAC,MAAA5C,GAAA,OAAAO,QAAAS,OAAAhB,KAAAqC,CAAA,CAnLD"}
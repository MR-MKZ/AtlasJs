{"version":3,"file":"index.esm.js","sources":["../src/extension.js","../src/index.js"],"sourcesContent":["import axios, { isAxiosError } from \"axios\";\r\nimport { promises as fsPromises } from \"fs\";\r\n\r\nexport function sendRequest(url, data = \"{}\", method = \"get\", headers = {}) {\r\n  let config = {\r\n    method: method,\r\n    maxBodyLength: Infinity,\r\n    url: url,\r\n    headers: headers,\r\n    data: data,\r\n  };\r\n\r\n  return axios\r\n    .request(config)\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch((error) => {\r\n      return {\r\n        error: true,\r\n        msg: error,\r\n      };\r\n    });\r\n}\r\n\r\nexport class AtlasFileReader {\r\n  constructor() {}\r\n\r\n  async getRegions() {\r\n    try {\r\n      const data = await fsPromises.readFile(\"./assets/regions.json\", \"utf8\");\r\n      return JSON.parse(data);\r\n    } catch (err) {\r\n      console.error(\"Error reading JSON file:\", err);\r\n      return;\r\n    }\r\n  }\r\n\r\n  async getRegionById(regId) {}\r\n\r\n  async getRegionByName(regName) {}\r\n}\r\n","import axios, { isAxiosError } from \"axios\";\r\nimport { sendRequest, AtlasFileReader } from \"./extension.js\";\r\n\r\nconst atlasFileReader = new AtlasFileReader();\r\n\r\n/**\r\n * This function returns and object that contains list of all regions.\r\n * \r\n * @returns {Promise<object>} A Promise that resolves to an array of regions.\r\n */\r\nexport async function getAllRegions() {\r\n  try {\r\n    const regions = await atlasFileReader.getRegions()\r\n    return regions\r\n  } catch (error) {\r\n    console.error(\"Error getting regions: \",error)\r\n    return;\r\n  }\r\n}\r\n\r\n/**\r\n * This function fetches data from an API and returns an array of countries.\r\n *\r\n * @param {boolean} flag Need flag of country or not.\r\n * @param {boolean} currency Need currency of country or not.\r\n * @param {boolean} dialCode Need dial code of country or not.\r\n * @returns {Promise<object>} A Promise that resolves to an array of countries fetched from the API.\r\n */\r\nexport async function getAllCountries(flag, currency, dialCode) {\r\n  const moreInfo = [];\r\n  const countries = [];\r\n\r\n  flag && moreInfo.push(\"flag\");\r\n  currency && moreInfo.push(\"currency\");\r\n  dialCode && moreInfo.push(\"dialCode\");\r\n\r\n  let url =\r\n    moreInfo.length > 0\r\n      ? `https://countriesnow.space/api/v0.1/countries/info?returns=${moreInfo.join(\r\n          \",\"\r\n        )}`\r\n      : \"https://countriesnow.space/api/v0.1/countries/positions\";\r\n\r\n  const response = await sendRequest(url);\r\n\r\n  if (!response.error) {\r\n    if (moreInfo.length == 0) {\r\n      for (let country of response.data) {\r\n        countries.push(country[\"name\"]);\r\n      }\r\n      return countries;\r\n    } else {\r\n      return response.data;\r\n    }\r\n  } else {\r\n    return {\r\n      error: true,\r\n      msg: response.msg,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * This function returns an array of country name and capitals.\r\n *\r\n * @param {string} country Country name if you want to get capital of a specific country\r\n * @returns {Promise<object>} A promise that resolves to an array of country name, country capital and iso2&3\r\n */\r\nexport async function getAllCapitals(country) {\r\n  if (country && country !== \"\") {\r\n    let data = JSON.stringify({\r\n      country: country,\r\n    });\r\n    let headers = {\r\n      \"Content-Type\": \"application/json\",\r\n    };\r\n    let url = \"https://countriesnow.space/api/v0.1/countries/capital\";\r\n\r\n    const response = await sendRequest(url, data, \"post\", headers);\r\n\r\n    if (!response.error) {\r\n      return response.data;\r\n    } else {\r\n      if (\r\n        isAxiosError(response.msg) &&\r\n        response.msg.response &&\r\n        response.msg.response.status == 404\r\n      ) {\r\n        return {\r\n          error: true,\r\n          msg: `Country ${country} is not exist!`,\r\n        };\r\n      }\r\n    }\r\n  } else {\r\n    let url = \"https://countriesnow.space/api/v0.1/countries/capital\";\r\n\r\n    const response = await sendRequest(url);\r\n\r\n    if (!response.error) {\r\n      return response.data;\r\n    } else {\r\n      return {\r\n        error: true,\r\n        msg: response.msg,\r\n      };\r\n    }\r\n  }\r\n}\r\n"],"names":["sendRequest","url","data","method","headers","axios","request","maxBodyLength","Infinity","then","response","error","msg","getAllCapitals","country","Promise","resolve","JSON","stringify","isAxiosError","status","e","reject","getAllCountries","flag","currency","dialCode","moreInfo","countries","push","length","join","_step","_iterator","_createForOfIteratorHelperLoose","done","value","getAllRegions","body","recover","result","atlasFileReader","getRegions","_catch","console","AtlasFileReader","_proto","prototype","fsPromises","readFile","parse","err","getRegionById","regId","getRegionByName","regName"],"mappings":"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"}
import r,{isAxiosError as e}from"axios";import{promises as o}from"fs";function n(e,o="{}",n="get",t={}){return r.request({method:n,maxBodyLength:Infinity,url:e,headers:t,data:o}).then(r=>r.data).catch(r=>({error:!0,msg:r}))}const t=new class{constructor(){}async getRegions(){try{const r=await o.readFile("./assets/regions.json","utf8");return JSON.parse(r)}catch(r){return void console.error("Error reading JSON file:",r)}}async getRegionByName(r){try{if(isNaN(Number(r))){const e=await o.readFile("./assets/regions.json","utf8");for(const o of JSON.parse(e))if(o.name.toLowerCase()===r.toLowerCase())return o;return void console.error(`Region ${r} not found`)}return void console.error("Error finding region: region name can not be Number")}catch(r){return void console.error("Error reading JSON file:",r)}}async getSubRegion(r){let e=[];try{const n=await o.readFile("./assets/subregions.json","utf8");for(const o of JSON.parse(n))o.region_id==r&&e.push(o);return 0==e.length?void console.error(`Subregion with region id ${r} not found`):e}catch(r){return void console.error("Error reading JSON file:",r)}}async getCountries(r,e,n,t,i,s,a,c,u,g,l){try{let d=[];const f=await o.readFile("./assets/countries_states_cities.json","utf8");for(const o of JSON.parse(f)){let f={};f.id=o.id,f.name=o.name,f.iso2=o.iso2,f.iso3=o.iso3,f.capital=o.capital,e&&(f.phone_code=o.phone_code),r&&(f.currency=o.currency,f.currency_name=o.currency_name,f.currency_symbol=o.currency_symbol),l&&(f.domain=o.tld),n&&(f.native=o.native),t&&(f.nationality=o.nationality),i&&(f.region=o.region,f.region_id=o.region_id),s&&(f.subregion=o.subregion,f.subregion_id=o.subregion_id),a&&(f.translations=o.translations),c&&(f.timezones=o.timezones),u&&(f.latitude=o.latitude,f.longitude=o.longitude),g&&(f.emoji=o.emoji,f.emojiU=o.emojiU),d.push(f)}return d}catch(r){return void console.error("Error getting countries:",r)}}};async function i(){try{return await t.getRegions()}catch(r){return void console.error("Error requesting regions: ",r)}}async function s(r){if(r&&""!==r)try{const e=await t.getRegionByName(r);if(null!=e){let r=e.id;const o=await t.getSubRegion(r);return null!=o?o:void 0}}catch(r){return void console.error("Error requesting subregions: ",r)}else console.error("Error requesting subregions: region name is required!")}async function a(r,e,o,n,i,s,a,c,u,g,l){try{const d=await t.getCountries(r,e,o,n,i,s,a,c,u,g,l);return null!=d?d:void 0}catch(r){console.error("Error requesting countries: ",r)}}async function c(r){if(!r||""===r){let r="https://countriesnow.space/api/v0.1/countries/capital";const e=await n(r);return e.error?{error:!0,msg:e.msg}:e.data}{let o=JSON.stringify({country:r}),t={"Content-Type":"application/json"},i="https://countriesnow.space/api/v0.1/countries/capital";const s=await n(i,o,"post",t);if(!s.error)return s.data;if(e(s.msg)&&s.msg.response&&404==s.msg.response.status)return{error:!0,msg:`Country ${r} is not exist!`}}}export{c as getAllCapitals,a as getAllCountries,i as getAllRegions,s as getSubRegions};
//# sourceMappingURL=index.esm.js.map

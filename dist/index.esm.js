import"axios";import{promises as e}from"fs";const r=new class{constructor(){}async getRegions(){try{const r=await e.readFile("./assets/regions.json","utf8");return JSON.parse(r)}catch(e){return void console.error("Error reading JSON file:",e)}}async getRegionByName(r){try{if(isNaN(Number(r))){const o=await e.readFile("./assets/regions.json","utf8");for(const e of JSON.parse(o))if(e.name.toLowerCase()===r.toLowerCase())return e;return void console.error(`Region ${r} not found`)}return void console.error("Error finding region: region name can not be Number or Boolean")}catch(e){return void console.error("Error reading JSON file:",e)}}async getSubRegion(r){let o=[];try{const n=await e.readFile("./assets/subregions.json","utf8");for(const e of JSON.parse(n))e.region_id==r&&o.push(e);return 0==o.length?void console.error(`Subregion with region id ${r} not found`):o}catch(e){return void console.error("Error reading JSON file:",e)}}async getCountries(r,o,n,t,i,s,a,u,l,c,g){try{let d=[];const y=await e.readFile("./assets/countries_states_cities.json","utf8");for(const e of JSON.parse(y)){let y={};y.id=e.id,y.name=e.name,y.iso2=e.iso2,y.iso3=e.iso3,y.capital=e.capital,o&&(y.phone_code=e.phone_code),r&&(y.currency=e.currency,y.currency_name=e.currency_name,y.currency_symbol=e.currency_symbol),g&&(y.domain=e.tld),n&&(y.native=e.native),t&&(y.nationality=e.nationality),i&&(y.region=e.region,y.region_id=e.region_id),s&&(y.subregion=e.subregion,y.subregion_id=e.subregion_id),a&&(y.translations=e.translations),u&&(y.timezones=e.timezones),l&&(y.latitude=e.latitude,y.longitude=e.longitude),c&&(y.emoji=e.emoji,y.emojiU=e.emojiU),d.push(y)}return d}catch(e){return void console.error("Error getting countries:",e)}}async getStates(r,o,n,t){try{if(null!=r&&null!=r&&isNaN(Number(r))||null!=o&&null!=o&&isNaN(Number(o))||null!=n&&null!=n&&isNaN(Number(n))){let i=[];const s=await e.readFile("./assets/countries_states_cities.json","utf8");for(const e of JSON.parse(s))if(null!=r&&null!=r&&e.name.toLowerCase()==r.toLowerCase()||null!=o&&null!=o&&e.iso3.toLowerCase()==o.toLowerCase()||null!=n&&null!=n&&e.iso2.toLowerCase()==n.toLowerCase())for(const r of e.states){let e={};e.id=r.id,e.name=r.name,e.state_code=r.state_code,t&&(e.latitude=r.latitude,e.longitude=r.longitude),i.push(e)}return 0==i.length?void console.error(`Country ${r} not found`):i}return void console.error("Error getting country state: country name can not be Number or Boolean")}catch(e){return void console.error("Error getting country states:",e)}}};async function o(){try{return await r.getRegions()}catch(e){return void console.error("Error requesting regions: ",e)}}async function n(e){if(e&&""!==e)try{const o=await r.getRegionByName(e);if(null!=o){let e=o.id;const n=await r.getSubRegion(e);return null!=n?n:void 0}}catch(e){return void console.error("Error requesting subregions: ",e)}else console.error("Error requesting subregions: region name is required!")}async function t(e,o,n,t,i,s,a,u,l,c,g){try{const d=await r.getCountries(e,o,n,t,i,s,a,u,l,c,g);return null!=d?d:void 0}catch(e){console.error("Error requesting countries: ",e)}}async function i(e,o,n,t){if(e&&""!=e||o&&""!=o||n&&""!=n)try{null!=e&&null!=e&&(e=e.toString()),null!=o&&null!=o&&(o=o.toString()),null!=n&&null!=n&&(n=n.toString());const i=await r.getStates(e,o,n,t);return null!=i?i:void 0}catch(e){console.error("Error requesting country states: ",e)}else console.error("Error requesting country states: country name is required! please enter country name, iso3 or iso2")}export{t as getAllCountries,o as getAllRegions,i as getCountryStates,n as getSubRegions};
//# sourceMappingURL=index.esm.js.map
h(r){return Promise.reject(r)}},t.getCountries=function(e,t,i,u,s,a,c,l,f,m,g){try{return Promise.resolve(o(function(){var o=[];return Promise.resolve(r.readFile("./assets/countries_states_cities.json","utf8")).then(function(r){for(var d,v=n(JSON.parse(r));!(d=v()).done;){var y=d.value,h={};h.id=y.id,h.name=y.name,h.iso2=y.iso2,h.iso3=y.iso3,h.capital=y.capital,t&&(h.phone_code=y.phone_code),e&&(h.currency=y.currency,h.currency_name=y.currency_name,h.currency_symbol=y.currency_symbol),g&&(h.domain=y.tld),i&&(h.native=y.native),u&&(h.nationality=y.nationality),s&&(h.region=y.region,h.region_id=y.region_id),a&&(h.subregion=y.subregion,h.subregion_id=y.subregion_id),c&&(h.translations=y.translations),l&&(h.timezones=y.timezones),f&&(h.latitude=y.latitude,h.longitude=y.longitude),m&&(h.emoji=y.emoji,h.emojiU=y.emojiU),o.push(h)}return o})},function(r){console.error("Error getting countries:",r)}))}catch(r){return Promise.reject(r)}},t.getStates=function(e,t,i,u){try{return Promise.resolve(o(function(){if(null!=e&&null!=e&&isNaN(Number(e))||null!=t&&null!=t&&isNaN(Number(t))||null!=i&&null!=i&&isNaN(Number(i))){var o=[];return Promise.resolve(r.readFile("./assets/countries_states_cities.json","utf8")).then(function(r){for(var s,a=n(JSON.parse(r));!(s=a()).done;){var c=s.value;if(null!=e&&null!=e&&c.name.toLowerCase()==e.toLowerCase()||null!=t&&null!=t&&c.iso3.toLowerCase()==t.toLowerCase()||null!=i&&null!=i&&c.iso2.toLowerCase()==i.toLowerCase())for(var l,f=n(c.states);!(l=f()).done;){var m=l.value,g={};g.id=m.id,g.name=m.name,g.state_code=m.state_code,u&&(g.latitude=m.latitude,g.longitude=m.longitude),o.push(g)}}if(0!=o.length)return o;console.error("Country "+e+" not found")})}console.error("Error getting country state: country name can not be Number or Boolean")},function(r){console.error("Error getting country states:",r)}))}catch(r){return Promise.reject(r)}},e}());export{u as getAllCountries,a as getAllRegions,i as getCountryStates,s as getSubRegions};
//# sourceMappingURL=index.esm.js.map

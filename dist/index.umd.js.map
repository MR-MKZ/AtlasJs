{"version":3,"file":"index.umd.js","sources":["../src/AtlasError.js","../src/extension.js","../src/index.js"],"sourcesContent":["class AtlasError extends Error {\r\n  constructor(message, type, tips, data) {\r\n    super(message);\r\n\r\n    this.name = \"AtlasError -> \" + type;\r\n    if (tips) {\r\n      this.tips = tips;\r\n    }\r\n    if (data) {\r\n      this.data = data;\r\n    }\r\n  }\r\n}\r\n\r\nexport function raiseError(message, type, tips, data) {\r\n  throw new AtlasError(message, type, tips, data);\r\n}\r\n","// import axios from \"axios\";\r\nimport { promises as fsPromises } from \"fs\";\r\nimport { raiseError } from \"./AtlasError.js\";\r\nimport { join, dirname } from 'path';\r\nimport { fileURLToPath } from 'url';\r\n\r\n// export function sendRequest(url, data = \"{}\", method = \"get\", headers = {}) {\r\n//   let config = {\r\n//     method: method,\r\n//     maxBodyLength: Infinity,\r\n//     url: url,\r\n//     headers: headers,\r\n//     data: data,\r\n//   };\r\n\r\n//   return axios\r\n//     .request(config)\r\n//     .then((response) => {\r\n//       return response.data;\r\n//     })\r\n//     .catch((error) => {\r\n//       return {\r\n//         error: true,\r\n//         msg: error,\r\n//       };\r\n//     });\r\n// }\r\n\r\nfunction getFilePath(filename) {\r\n  try {\r\n    const __filename = fileURLToPath(import.meta.url);\r\n    const __dirname = dirname(__filename);\r\n    const filePath = join(__dirname, '..', 'assets', filename);\r\n    return filePath;\r\n  } catch (error) {\r\n    console.error('Error reading file:', error);\r\n  }\r\n}\r\n\r\nexport class AtlasFileReader {\r\n  constructor() {}\r\n\r\n  async getRegions() {\r\n    const data = await fsPromises.readFile(getFilePath(\"regions.json\"), \"utf8\");\r\n    return JSON.parse(data);\r\n  }\r\n\r\n  async getRegionByName(regName) {\r\n    if (isNaN(Number(regName))) {\r\n      const data = await fsPromises.readFile(getFilePath(\"regions.json\"), \"utf8\");\r\n      for (const region of JSON.parse(data)) {\r\n        if (region.name.toLowerCase() === regName.toLowerCase()) {\r\n          return region;\r\n        }\r\n      }\r\n      raiseError(`region ${regName} not found`, \"RESULT_NOT_FOUND\");\r\n    } else {\r\n      raiseError(\"region name must be string\", \"INPUT_TYPE_ERR\");\r\n    }\r\n  }\r\n\r\n  async getSubRegion(regionId) {\r\n    let subregions = [];\r\n    const data = await fsPromises.readFile(getFilePath(\"subregions.json\"), \"utf8\");\r\n    for (const subregion of JSON.parse(data)) {\r\n      if (subregion[\"region_id\"] == regionId) {\r\n        subregions.push(subregion);\r\n      }\r\n    }\r\n    if (subregions.length === 0) {\r\n      raiseError(\r\n        `Subregion with region id ${regionId} not found`,\r\n        \"RESULT_NOT_FOUND\"\r\n      );\r\n    } else {\r\n      return subregions;\r\n    }\r\n  }\r\n\r\n  async getCountries(\r\n    currency,\r\n    dialCode,\r\n    native,\r\n    nationality,\r\n    region,\r\n    subregion,\r\n    translations,\r\n    timezones,\r\n    geolocation,\r\n    emojies,\r\n    domain\r\n  ) {\r\n    let countries = [];\r\n    const data = await fsPromises.readFile(\r\n      getFilePath(\"countries_states_cities.json\"),\r\n      \"utf8\"\r\n    );\r\n    for (const country of JSON.parse(data)) {\r\n      let countryObj = {};\r\n      countryObj[\"id\"] = country[\"id\"];\r\n      countryObj[\"name\"] = country[\"name\"];\r\n      countryObj[\"iso2\"] = country[\"iso2\"];\r\n      countryObj[\"iso3\"] = country[\"iso3\"];\r\n      countryObj[\"capital\"] = country[\"capital\"];\r\n      if (dialCode) countryObj[\"phone_code\"] = country[\"phone_code\"];\r\n      if (currency) {\r\n        countryObj[\"currency\"] = country[\"currency\"];\r\n        countryObj[\"currency_name\"] = country[\"currency_name\"];\r\n        countryObj[\"currency_symbol\"] = country[\"currency_symbol\"];\r\n      }\r\n      if (domain) countryObj[\"domain\"] = country[\"tld\"];\r\n      if (native) countryObj[\"native\"] = country[\"native\"];\r\n      if (nationality) countryObj[\"nationality\"] = country[\"nationality\"];\r\n      if (region) {\r\n        countryObj[\"region\"] = country[\"region\"];\r\n        countryObj[\"region_id\"] = country[\"region_id\"];\r\n      }\r\n      if (subregion) {\r\n        countryObj[\"subregion\"] = country[\"subregion\"];\r\n        countryObj[\"subregion_id\"] = country[\"subregion_id\"];\r\n      }\r\n      if (translations) countryObj[\"translations\"] = country[\"translations\"];\r\n\r\n      if (timezones) countryObj[\"timezones\"] = country[\"timezones\"];\r\n\r\n      if (geolocation) {\r\n        countryObj[\"latitude\"] = country[\"latitude\"];\r\n        countryObj[\"longitude\"] = country[\"longitude\"];\r\n      }\r\n\r\n      if (emojies) {\r\n        countryObj[\"emoji\"] = country[\"emoji\"];\r\n        countryObj[\"emojiU\"] = country[\"emojiU\"];\r\n      }\r\n      countries.push(countryObj);\r\n    }\r\n    return countries;\r\n  }\r\n\r\n  async getStates(countryName, iso3, iso2, geolocation) {\r\n    if (\r\n      (countryName !== undefined &&\r\n        countryName != null &&\r\n        isNaN(Number(countryName))) ||\r\n      (iso3 !== undefined && isNaN(Number(iso3))) ||\r\n      (iso2 !== undefined && isNaN(Number(iso2)))\r\n    ) {\r\n      let states = [];\r\n      const data = await fsPromises.readFile(\r\n        getFilePath(\"countries_states_cities.json\"),\r\n        \"utf8\"\r\n      );\r\n      for (const country of JSON.parse(data)) {\r\n        if (\r\n          (countryName !== undefined &&\r\n            countryName != null &&\r\n            country[\"name\"].toLowerCase() === countryName.toLowerCase()) ||\r\n          (iso3 !== undefined &&\r\n            country[\"iso3\"].toLowerCase() === iso3.toLowerCase()) ||\r\n          (iso2 !== undefined &&\r\n            country[\"iso2\"].toLowerCase() === iso2.toLowerCase())\r\n        ) {\r\n          for (const state of country[\"states\"]) {\r\n            let statesObj = {};\r\n            statesObj[\"id\"] = state[\"id\"];\r\n            statesObj[\"name\"] = state[\"name\"];\r\n            statesObj[\"state_code\"] = state[\"state_code\"];\r\n            if (geolocation) {\r\n              statesObj[\"latitude\"] = state[\"latitude\"];\r\n              statesObj[\"longitude\"] = state[\"longitude\"];\r\n            }\r\n            states.push(statesObj);\r\n          }\r\n        }\r\n      }\r\n      if (states.length === 0) {\r\n        raiseError(`Country ${countryName} not found`, \"RESULT_NOT_FOUND\", {\r\n          country_name: \"check entered country name: \" + countryName,\r\n          iso3: \"check entered iso3: \" + iso3,\r\n          iso2: \"check entered iso2: \" + iso2,\r\n        });\r\n      } else {\r\n        return states;\r\n      }\r\n    } else {\r\n      raiseError(\"region name must be string\", \"INPUT_TYPE_ERR\");\r\n    }\r\n  }\r\n\r\n  async getCities(countryName, stateName, geolocation) {\r\n    let cities = [];\r\n    if (isNaN(Number(countryName)) && isNaN(Number(stateName))) {\r\n      const data = await fsPromises.readFile(\r\n        getFilePath(\"countries_states_cities.json\"),\r\n        \"utf8\"\r\n      );\r\n      let foundCountry = false;\r\n      let foundState = false;\r\n      for (const country of JSON.parse(data)) {\r\n        if (country[\"name\"].toLowerCase() === countryName.toLowerCase()) {\r\n          foundCountry = true;\r\n          for (const state of country[\"states\"]) {\r\n            if (state[\"name\"].toLowerCase() === stateName.toLowerCase()) {\r\n              foundState = true;\r\n              for (const city of state[\"cities\"]) {\r\n                let cityObj = {};\r\n                cityObj[\"id\"] = city[\"id\"];\r\n                cityObj[\"name\"] = city[\"name\"];\r\n                if (geolocation) {\r\n                  cityObj[\"latitude\"] = city[\"latitude\"];\r\n                  cityObj[\"longitude\"] = city[\"longitude\"];\r\n                }\r\n                cities.push(cityObj);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (cities.length > 0) {\r\n        return cities;\r\n      } else {\r\n        if (foundCountry) {\r\n          if (foundState) {\r\n            raiseError(`There is no city for ${countryName},${stateName}`, \"RESULT_NOT_FOUND\");\r\n          } else {\r\n            raiseError(`State ${stateName} not found`, \"RESULT_NOT_FOUND\", {\r\n              state: \"check entered state name: \" + stateName,\r\n            });\r\n          }\r\n        } else {\r\n          raiseError(`Country ${countryName} not found`, \"RESULT_NOT_FOUND\", {\r\n            country: \"check entered country name: \" + countryName,\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      raiseError(\r\n        \"country name and state name must be string\",\r\n        \"INPUT_TYPE_ERR\"\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { AtlasFileReader } from \"./extension.js\";\r\nimport { raiseError } from \"./AtlasError.js\";\r\n\r\nconst atlasFileReader = new AtlasFileReader();\r\n\r\n/**\r\n * This function returns and object that contains list of all regions.\r\n *\r\n * @returns {Promise<object>} A Promise that resolves to an array of regions.\r\n * \r\n * @example\r\n * // Returns list of all regions.\r\n * getAllRegions().then((regions) => {\r\n *   console.log(regions);\r\n * }).catch((error) => {\r\n *   console.log(error);\r\n * })\r\n * \r\n */\r\nexport async function getAllRegions() {\r\n  return await atlasFileReader.getRegions();\r\n}\r\n\r\n/**\r\n * This function return subregions of a region.\r\n *\r\n * @param {string} region region name to get subregions.\r\n * @returns {Promise<object>} A Promise that resolves to an array of subregions of entered region.\r\n * \r\n * @example\r\n * // Returns list of subregions for Asia region.\r\n * getSubRegions(\"Asia\").then((subregions) => {\r\n *   console.log(subregions);\r\n * }).catch((error) => {\r\n *   console.log(error);\r\n * })\r\n * \r\n * // Returns INPUT_TYPE_ERR error.\r\n * getSubRegions(12).then((subregions) => {\r\n *   console.log(subregions);\r\n * }).catch((error) => {\r\n *   console.log(error);\r\n * })\r\n * \r\n * // Returns MISSING_REQUIRED_VALUE error.\r\n * getSubRegions().then((subregions) => {\r\n *   console.log(subregions);\r\n * }).catch((error) => {\r\n *   console.log(error);\r\n * })\r\n */\r\nexport async function getSubRegions(region) {\r\n  if (region && region !== undefined && region !== \"\") {\r\n    const foundRegion = await atlasFileReader.getRegionByName(region);\r\n    if (foundRegion !== undefined) {\r\n      let regionId = foundRegion.id;\r\n      return await atlasFileReader.getSubRegion(regionId);\r\n    }\r\n  } else {\r\n    raiseError(\"region name is required!\", \"MISSING_REQUIRED_VALUE\");\r\n  }\r\n}\r\n\r\n/**\r\n * This function gives you list of countries with some special information.\r\n *\r\n * @param {boolean} currency do you want currency of country?\r\n * @param {boolean} dialCode do you want dial code of country?\r\n * @param {boolean} native do you want native of country?\r\n * @param {boolean} nationality do you want nationality of country?\r\n * @param {boolean} region do you want region of country?\r\n * @param {boolean} subregion do you want subregion of country?\r\n * @param {boolean} translations do you want translations of country?\r\n * @param {boolean} timezones do you want timezones of country?\r\n * @param {boolean} geolocation do you want geolocation of country?\r\n * @param {boolean} emojies do you want emojies of country?\r\n * @param {boolean} domain do you want domain of country?\r\n * @returns {Promise<object>} A Promise that resolves to an array of countries with some special information if you want.\r\n * \r\n * @example\r\n * // Returns list of all countries.\r\n * getAllCountries().then((countries) => {\r\n *   console.log(countries);\r\n * }).catch((error) => {\r\n *   console.log(error);\r\n * })\r\n * \r\n */\r\nexport async function getAllCountries(\r\n  currency,\r\n  dialCode,\r\n  native,\r\n  nationality,\r\n  region,\r\n  subregion,\r\n  translations,\r\n  timezones,\r\n  geolocation,\r\n  emojies,\r\n  domain\r\n) {\r\n  return await atlasFileReader.getCountries(\r\n    currency,\r\n    dialCode,\r\n    native,\r\n    nationality,\r\n    region,\r\n    subregion,\r\n    translations,\r\n    timezones,\r\n    geolocation,\r\n    emojies,\r\n    domain\r\n  );\r\n}\r\n\r\n/**\r\n * This function gives you states of a country.\r\n *\r\n * @param {string} country country name to get states\r\n * @param {string} iso3 country iso3 to get states\r\n * @param {string} iso2 country iso2 to get states\r\n * @param {boolean} geolocation do you want geolocation of each country state?\r\n * @returns {Promise<object>} A Promise that resolves to an array of country states with some special information if you want.\r\n * \r\n * @example\r\n * // Returns list of states for Iran.\r\n * getCountryStates(\"iran\", \"\", \"\", true).then((states) => {\r\n *   console.log(states);\r\n * }).catch((error) => {\r\n *   console.log(error);\r\n * })\r\n * \r\n * getCountryStates(\"\", \"IRN\", \"\", true).then((states) => {\r\n *   console.log(states);\r\n * }).catch((error) => {\r\n *   console.log(error);\r\n * })\r\n * \r\n * getCountryStates(\"\", \"\", \"IR\", true).then((states) => {\r\n *   console.log(states);\r\n * }).catch((error) => {\r\n *   console.log(error);\r\n * })\r\n * \r\n * // Returns INPUT_TYPE_ERR error.\r\n * getCountryStates(12, \"\", \"\", true).then((states) => {\r\n *   console.log(states);\r\n * }).catch((error) => {\r\n *   console.log(error);\r\n * })\r\n * \r\n * // Returns MISSING_REQUIRED_VALUE error.\r\n * getCountryStates(\"\", \"\", \"\", true).then((states) => {\r\n *   console.log(states);\r\n * }).catch((error) => {\r\n *   console.log(error);\r\n * })\r\n */\r\nexport async function getCountryStates(country, iso3, iso2, geolocation) {\r\n  if (\r\n    (country && country !== \"\") ||\r\n    (iso3 && iso3 !== \"\") ||\r\n    (iso2 && iso2 !== \"\")\r\n  ) {\r\n    if (country != null && country != undefined) {\r\n      country = country.toString();\r\n    }\r\n    if (iso3 != null && iso3 !== undefined) {\r\n      iso3 = iso3.toString();\r\n    }\r\n    if (iso2 != null && iso2 != undefined) {\r\n      iso2 = iso2.toString();\r\n    }\r\n    return await atlasFileReader.getStates(country, iso3, iso2, geolocation);\r\n  } else {\r\n    raiseError(\r\n      \"country name, iso3 or iso2 is missing, at least one of them is required!\",\r\n      \"MISSING_REQUIRED_VALUE\"\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * This function gives you cities of a state.\r\n * \r\n * @param {string} country country name\r\n * @param {string} state state name to get cities\r\n * @param {boolean} geolocation do you want geolocation of each state city?\r\n * @returns {Promise<object>} A Promise that resolves to an array of state cities with some special information if you want.\r\n * \r\n * @example\r\n * // Returns list of cities for Razavi Khorasan state of Iran.\r\n * getStateCities(\"iran\", \"razavi khorasan\", true).then((cities) => {\r\n *   console.log(cities);\r\n * }).catch((error) => {\r\n *   console.log(error);\r\n * })\r\n * \r\n * // Returns INPUT_TYPE_ERR error.\r\n * getStateCities(12, \"\", true).then((cities) => {\r\n *   console.log(cities);\r\n * }).catch((error) => {\r\n *   console.log(error);\r\n * })\r\n * \r\n * // Returns MISSING_REQUIRED_VALUE error.\r\n * getStateCities(\"\", \"\", true).then((cities) => {\r\n *   console.log(cities);\r\n * }).catch((error) => {\r\n *   console.log(error);\r\n * })\r\n */\r\nexport async function getStateCities(country, state, geolocation) {\r\n  if (country && country !== undefined && country !== \"\") {\r\n    if (state && state !== undefined && state !== \"\") {\r\n      if (!isNaN(country)) country = country.toString();\r\n      if (!isNaN(state)) state = state.toString();\r\n\r\n      return await atlasFileReader.getCities(country, state, geolocation);\r\n    } else {\r\n      raiseError(\"state name is required!\", \"MISSING_REQUIRED_VALUE\");\r\n    }\r\n  } else {\r\n    raiseError(\"country name is required!\", \"MISSING_REQUIRED_VALUE\");\r\n  }\r\n}\r\n"],"names":["AtlasError","_Error","message","type","tips","data","_this","call","name","_wrapNativeSuper","Error","raiseError","getFilePath","filename","__filename","fileURLToPath","__dirname","dirname","join","error","console","atlasFileReader","AtlasFileReader","_proto","prototype","getRegions","Promise","resolve","fsPromises","promises","readFile","then","JSON","parse","e","reject","getRegionByName","regName","isNaN","Number","_step","_iterator","_createForOfIteratorHelperLoose","done","region","value","toLowerCase","getSubRegion","regionId","subregions","_step2","_iterator2","subregion","push","length","getCountries","currency","dialCode","native","nationality","translations","timezones","geolocation","emojies","domain","countries","_iterator3","_step3","country","countryObj","getStates","countryName","iso3","iso2","undefined","states","_step4","_iterator4","_iterator5","_step5","state","statesObj","country_name","getCities","stateName","cities","_step6","foundCountry","foundState","_iterator6","_step7","_iterator7","_iterator8","_step8","city","cityObj","toString","foundRegion","id"],"mappings":"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"}
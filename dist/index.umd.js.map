{"version":3,"file":"index.umd.js","sources":["../src/extension.js","../src/index.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { promises as fsPromises } from \"fs\";\r\n\r\nexport function sendRequest(url, data = \"{}\", method = \"get\", headers = {}) {\r\n  let config = {\r\n    method: method,\r\n    maxBodyLength: Infinity,\r\n    url: url,\r\n    headers: headers,\r\n    data: data,\r\n  };\r\n\r\n  return axios\r\n    .request(config)\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch((error) => {\r\n      return {\r\n        error: true,\r\n        msg: error,\r\n      };\r\n    });\r\n}\r\n\r\nexport class AtlasFileReader {\r\n  constructor() {}\r\n\r\n  async getRegions() {\r\n    try {\r\n      const data = await fsPromises.readFile(\"./assets/regions.json\", \"utf8\");\r\n      return JSON.parse(data);\r\n    } catch (err) {\r\n      console.error(\"Error reading JSON file:\", err);\r\n      return;\r\n    }\r\n  }\r\n\r\n  async getRegionByName(regName) {\r\n    try {\r\n      if (isNaN(Number(regName))) {\r\n        const data = await fsPromises.readFile(\"./assets/regions.json\", \"utf8\");\r\n        for (const region of JSON.parse(data)) {\r\n          if (region.name.toLowerCase() === regName.toLowerCase()) {\r\n            return region;\r\n          }\r\n        }\r\n        console.error(`Region ${regName} not found`);\r\n        return;\r\n      } else {\r\n        console.error(\r\n          \"Error finding region: region name can not be Number or Boolean\"\r\n        );\r\n        return;\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error reading JSON file:\", err);\r\n      return;\r\n    }\r\n  }\r\n\r\n  async getSubRegion(regionId) {\r\n    let subregions = [];\r\n    try {\r\n      const data = await fsPromises.readFile(\r\n        \"./assets/subregions.json\",\r\n        \"utf8\"\r\n      );\r\n      for (const subregion of JSON.parse(data)) {\r\n        if (subregion[\"region_id\"] == regionId) {\r\n          subregions.push(subregion);\r\n        }\r\n      }\r\n      if (subregions.length == 0) {\r\n        console.error(`Subregion with region id ${regionId} not found`);\r\n        return;\r\n      } else {\r\n        return subregions;\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error reading JSON file:\", err);\r\n      return;\r\n    }\r\n  }\r\n\r\n  async getCountries(\r\n    currency,\r\n    dialCode,\r\n    native,\r\n    nationality,\r\n    region,\r\n    subregion,\r\n    translations,\r\n    timezones,\r\n    geolocation,\r\n    emojies,\r\n    domain\r\n  ) {\r\n    try {\r\n      let countries = [];\r\n      const data = await fsPromises.readFile(\r\n        \"./assets/countries_states_cities.json\",\r\n        \"utf8\"\r\n      );\r\n      for (const country of JSON.parse(data)) {\r\n        let countryObj = {};\r\n        countryObj[\"id\"] = country[\"id\"];\r\n        countryObj[\"name\"] = country[\"name\"];\r\n        countryObj[\"iso2\"] = country[\"iso2\"];\r\n        countryObj[\"iso3\"] = country[\"iso3\"];\r\n        countryObj[\"capital\"] = country[\"capital\"];\r\n        if (dialCode) countryObj[\"phone_code\"] = country[\"phone_code\"];\r\n        if (currency) {\r\n          countryObj[\"currency\"] = country[\"currency\"];\r\n          countryObj[\"currency_name\"] = country[\"currency_name\"];\r\n          countryObj[\"currency_symbol\"] = country[\"currency_symbol\"];\r\n        }\r\n        if (domain) countryObj[\"domain\"] = country[\"tld\"];\r\n        if (native) countryObj[\"native\"] = country[\"native\"];\r\n        if (nationality) countryObj[\"nationality\"] = country[\"nationality\"];\r\n        if (region) {\r\n          countryObj[\"region\"] = country[\"region\"];\r\n          countryObj[\"region_id\"] = country[\"region_id\"];\r\n        }\r\n        if (subregion) {\r\n          countryObj[\"subregion\"] = country[\"subregion\"];\r\n          countryObj[\"subregion_id\"] = country[\"subregion_id\"];\r\n        }\r\n        if (translations) countryObj[\"translations\"] = country[\"translations\"];\r\n\r\n        if (timezones) countryObj[\"timezones\"] = country[\"timezones\"];\r\n\r\n        if (geolocation) {\r\n          countryObj[\"latitude\"] = country[\"latitude\"];\r\n          countryObj[\"longitude\"] = country[\"longitude\"];\r\n        }\r\n\r\n        if (emojies) {\r\n          countryObj[\"emoji\"] = country[\"emoji\"];\r\n          countryObj[\"emojiU\"] = country[\"emojiU\"];\r\n        }\r\n        countries.push(countryObj);\r\n      }\r\n      return countries;\r\n    } catch (err) {\r\n      console.error(\"Error getting countries:\", err);\r\n      return;\r\n    }\r\n  }\r\n\r\n  async getStates(countryName, iso3, iso2, geolocation) {\r\n    try {\r\n      if (\r\n        (countryName != undefined &&\r\n          countryName != null &&\r\n          isNaN(Number(countryName))) ||\r\n        (iso3 != undefined && iso3 != null && isNaN(Number(iso3))) ||\r\n        (iso2 != undefined && iso2 != null && isNaN(Number(iso2)))\r\n      ) {\r\n        let states = [];\r\n        const data = await fsPromises.readFile(\r\n          \"./assets/countries_states_cities.json\",\r\n          \"utf8\"\r\n        );\r\n        for (const country of JSON.parse(data)) {\r\n          if (\r\n            (countryName != undefined &&\r\n              countryName != null &&\r\n              country[\"name\"].toLowerCase() == countryName.toLowerCase()) ||\r\n            (iso3 != undefined &&\r\n              iso3 != null &&\r\n              country[\"iso3\"].toLowerCase() == iso3.toLowerCase()) ||\r\n            (iso2 != undefined &&\r\n              iso2 != null &&\r\n              country[\"iso2\"].toLowerCase() == iso2.toLowerCase())\r\n          ) {\r\n            for (const state of country[\"states\"]) {\r\n              let statesObj = {};\r\n              statesObj[\"id\"] = state[\"id\"];\r\n              statesObj[\"name\"] = state[\"name\"];\r\n              statesObj[\"state_code\"] = state[\"state_code\"];\r\n              if (geolocation) {\r\n                statesObj[\"latitude\"] = state[\"latitude\"];\r\n                statesObj[\"longitude\"] = state[\"longitude\"];\r\n              }\r\n              states.push(statesObj);\r\n            }\r\n          }\r\n        }\r\n        if (states.length == 0) {\r\n          console.error(`Country ${countryName} not found`);\r\n          return;\r\n        } else {\r\n          return states;\r\n        }\r\n      } else {\r\n        console.error(\r\n          `Error getting country state: country name can not be Number or Boolean`\r\n        );\r\n        return;\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error getting country states:\", err);\r\n      return;\r\n    }\r\n  }\r\n}\r\n","import { sendRequest, AtlasFileReader } from \"./extension.js\";\r\n\r\nconst atlasFileReader = new AtlasFileReader();\r\n\r\n/**\r\n * This function returns and object that contains list of all regions.\r\n *\r\n * @returns {Promise<object>} A Promise that resolves to an array of regions.\r\n */\r\nexport async function getAllRegions() {\r\n  try {\r\n    const regions = await atlasFileReader.getRegions();\r\n    return regions;\r\n  } catch (error) {\r\n    console.error(\"Error requesting regions: \", error);\r\n    return;\r\n  }\r\n}\r\n\r\n/**\r\n * This function return subregions of a region.\r\n *\r\n * @param {string} region region name to get subregions.\r\n * @returns {Promise<object>} A Promise that resolves to an array of subregions of entered region.\r\n */\r\nexport async function getSubRegions(region) {\r\n  if (region && region !== \"\") {\r\n    try {\r\n      const findedRegion = await atlasFileReader.getRegionByName(region);\r\n      if (findedRegion != undefined) {\r\n        let regionId = findedRegion.id;\r\n        const subregion = await atlasFileReader.getSubRegion(regionId);\r\n        if (subregion != undefined) {\r\n          return subregion;\r\n        } else {\r\n          return;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error requesting subregions: \", error);\r\n      return;\r\n    }\r\n  } else {\r\n    console.error(\"Error requesting subregions: region name is required!\");\r\n    return;\r\n  }\r\n}\r\n\r\n/**\r\n * This function gives you list of countries with some special informations.\r\n *\r\n * @param {boolean} currency do you want currency of country?\r\n * @param {boolean} dialCode do you want dial code of country?\r\n * @param {boolean} native do you want native of country?\r\n * @param {boolean} nationality do you want nationality of country?\r\n * @param {boolean} region do you want region of country?\r\n * @param {boolean} subregion do you want subregion of country?\r\n * @param {boolean} translations do you want translations of country?\r\n * @param {boolean} timezones do you want timezones of country?\r\n * @param {boolean} geolocation do you want geolocation of country?\r\n * @param {boolean} emojies do you want emojies of country?\r\n * @param {boolean} domain do you want domain of country?\r\n * @returns {Promise<object>} A Promise that resolves to an array of countries with some special informations if you want.\r\n */\r\nexport async function getAllCountries(\r\n  currency,\r\n  dialCode,\r\n  native,\r\n  nationality,\r\n  region,\r\n  subregion,\r\n  translations,\r\n  timezones,\r\n  geolocation,\r\n  emojies,\r\n  domain\r\n) {\r\n  try {\r\n    const countries = await atlasFileReader.getCountries(\r\n      currency,\r\n      dialCode,\r\n      native,\r\n      nationality,\r\n      region,\r\n      subregion,\r\n      translations,\r\n      timezones,\r\n      geolocation,\r\n      emojies,\r\n      domain\r\n    );\r\n    if (countries != undefined) {\r\n      return countries;\r\n    } else {\r\n      return;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error requesting countries: \", error);\r\n  }\r\n}\r\n\r\n/**\r\n * This function gives you states of a country.\r\n *\r\n * @param {string} country country name to get states\r\n * @param {string} iso3 country iso3 to get states\r\n * @param {string} iso2 country iso2 to get states\r\n * @param {boolean} geolocation do you want geolocation of each country state?\r\n * @returns {Promise<object>} A Promise that resolves to an array of country states with some special informations if you want.\r\n */\r\nexport async function getCountryStates(country, iso3, iso2, geolocation) {\r\n  if (\r\n    (country && country != \"\") ||\r\n    (iso3 && iso3 != \"\") ||\r\n    (iso2 && iso2 != \"\")\r\n  ) {\r\n    try {\r\n      if (country != null && country != undefined) {\r\n        country = country.toString();\r\n      }\r\n      if (iso3 != null && iso3 != undefined) {\r\n        iso3 = iso3.toString();\r\n      }\r\n      if (iso2 != null && iso2 != undefined) {\r\n        iso2 = iso2.toString();\r\n      }\r\n      const states = await atlasFileReader.getStates(\r\n        country,\r\n        iso3,\r\n        iso2,\r\n        geolocation\r\n      );\r\n      if (states != undefined) {\r\n        return states;\r\n      } else {\r\n        return;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error requesting country states: \", error);\r\n    }\r\n  } else {\r\n    console.error(\r\n      \"Error requesting country states: country name is required! please enter country name, iso3 or iso2\"\r\n    );\r\n    return;\r\n  }\r\n}\r\n"],"names":["_catch","body","recover","result","e","then","atlasFileReader","AtlasFileReader","_proto","prototype","getRegions","Promise","resolve","fsPromises","readFile","JSON","parse","err","console","error","reject","getRegionByName","regName","isNaN","Number","data","_iterator","_step","_createForOfIteratorHelperLoose","done","region","value","name","toLowerCase","getSubRegion","regionId","subregions","_step2","_iterator2","subregion","push","length","getCountries","currency","dialCode","native","nationality","translations","timezones","geolocation","emojies","domain","countries","promises","_iterator3","_step3","country","countryObj","getStates","countryName","iso3","iso2","undefined","states","_step4","_iterator4","_step5","_iterator5","state","statesObj","toString","findedRegion","id"],"mappings":"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"}
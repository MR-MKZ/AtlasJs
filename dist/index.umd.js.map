{"version":3,"file":"index.umd.js","sources":["../src/extension.js","../src/index.js"],"sourcesContent":["import axios, { isAxiosError } from \"axios\";\r\nimport { promises as fsPromises } from \"fs\";\r\n\r\nexport function sendRequest(url, data = \"{}\", method = \"get\", headers = {}) {\r\n  let config = {\r\n    method: method,\r\n    maxBodyLength: Infinity,\r\n    url: url,\r\n    headers: headers,\r\n    data: data,\r\n  };\r\n\r\n  return axios\r\n    .request(config)\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch((error) => {\r\n      return {\r\n        error: true,\r\n        msg: error,\r\n      };\r\n    });\r\n}\r\n\r\nexport class AtlasFileReader {\r\n  constructor() {}\r\n\r\n  async getRegions() {\r\n    try {\r\n      const data = await fsPromises.readFile(\"./assets/regions.json\", \"utf8\");\r\n      return JSON.parse(data);\r\n    } catch (err) {\r\n      console.error(\"Error reading JSON file:\", err);\r\n      return;\r\n    }\r\n  }\r\n\r\n  async getRegionByName(regName) {\r\n    try {\r\n      if (isNaN(Number(regName))) {\r\n        const data = await fsPromises.readFile(\"./assets/regions.json\", \"utf8\");\r\n        for (const region of JSON.parse(data)) {\r\n          if (region.name.toLowerCase() === regName.toLowerCase()) {\r\n            return region;\r\n          }\r\n        }\r\n        console.error(`Region ${regName} not found`);\r\n        return;\r\n      } else {\r\n        console.error(\"Error finding region: region name can not be Number\");\r\n        return;\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error reading JSON file:\", err);\r\n      return;\r\n    }\r\n  }\r\n\r\n  async getSubRegion(regionId) {\r\n    let subregions = [];\r\n    try {\r\n      const data = await fsPromises.readFile(\r\n        \"./assets/subregions.json\",\r\n        \"utf8\"\r\n      );\r\n      for (const subregion of JSON.parse(data)) {\r\n        if (subregion[\"region_id\"] == regionId) {\r\n          subregions.push(subregion);\r\n        }\r\n      }\r\n      if (subregions.length == 0) {\r\n        console.error(`Subregion with region id ${regionId} not found`);\r\n        return;\r\n      } else {\r\n        return subregions;\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error reading JSON file:\", err);\r\n      return;\r\n    }\r\n  }\r\n\r\n  async getCountries(\r\n    currency,\r\n    dialCode,\r\n    native,\r\n    nationality,\r\n    region,\r\n    subregion,\r\n    translations,\r\n    timezones,\r\n    geolocation,\r\n    emojies,\r\n    domain\r\n  ) {\r\n    try {\r\n      let countries = [];\r\n      const data = await fsPromises.readFile(\r\n        \"./assets/countries_states_cities.json\",\r\n        \"utf8\"\r\n      );\r\n      for (const country of JSON.parse(data)) {\r\n        let countryObj = {};\r\n        countryObj[\"id\"] = country[\"id\"];\r\n        countryObj[\"name\"] = country[\"name\"];\r\n        countryObj[\"iso2\"] = country[\"iso2\"];\r\n        countryObj[\"iso3\"] = country[\"iso3\"];\r\n        countryObj[\"capital\"] = country[\"capital\"];\r\n        if (dialCode) countryObj[\"phone_code\"] = country[\"phone_code\"];\r\n        if (currency) {\r\n          countryObj[\"currency\"] = country[\"currency\"];\r\n          countryObj[\"currency_name\"] = country[\"currency_name\"];\r\n          countryObj[\"currency_symbol\"] = country[\"currency_symbol\"];\r\n        }\r\n        if (domain) countryObj[\"domain\"] = country[\"tld\"];\r\n        if (native) countryObj[\"native\"] = country[\"native\"];\r\n        if (nationality) countryObj[\"nationality\"] = country[\"nationality\"];\r\n        if (region) {\r\n          countryObj[\"region\"] = country[\"region\"];\r\n          countryObj[\"region_id\"] = country[\"region_id\"];\r\n        }\r\n        if (subregion) {\r\n          countryObj[\"subregion\"] = country[\"subregion\"];\r\n          countryObj[\"subregion_id\"] = country[\"subregion_id\"];\r\n        }\r\n        if (translations) countryObj[\"translations\"] = country[\"translations\"];\r\n\r\n        if (timezones) countryObj[\"timezones\"] = country[\"timezones\"];\r\n\r\n        if (geolocation) {\r\n          countryObj[\"latitude\"] = country[\"latitude\"];\r\n          countryObj[\"longitude\"] = country[\"longitude\"];\r\n        }\r\n\r\n        if (emojies) {\r\n          countryObj[\"emoji\"] = country[\"emoji\"];\r\n          countryObj[\"emojiU\"] = country[\"emojiU\"];\r\n        }\r\n        countries.push(countryObj);\r\n      }\r\n      return countries;\r\n    } catch (err) {\r\n      console.error(\"Error getting countries:\", err);\r\n      return;\r\n    }\r\n  }\r\n}\r\n","import axios, { isAxiosError } from \"axios\";\r\nimport { sendRequest, AtlasFileReader } from \"./extension.js\";\r\n\r\nconst atlasFileReader = new AtlasFileReader();\r\n\r\n/**\r\n * This function returns and object that contains list of all regions.\r\n *\r\n * @returns {Promise<object>} A Promise that resolves to an array of regions.\r\n */\r\nexport async function getAllRegions() {\r\n  try {\r\n    const regions = await atlasFileReader.getRegions();\r\n    return regions;\r\n  } catch (error) {\r\n    console.error(\"Error requesting regions: \", error);\r\n    return;\r\n  }\r\n}\r\n\r\n/**\r\n * This function return subregions of a region.\r\n *\r\n * @param {string} region region name to get subregions.\r\n * @returns {Promise<object>} A Promise that resolves to an array of subregions of entered region.\r\n */\r\nexport async function getSubRegions(region) {\r\n  if (region && region !== \"\") {\r\n    try {\r\n      const findedRegion = await atlasFileReader.getRegionByName(region);\r\n      if (findedRegion != undefined) {\r\n        let regionId = findedRegion.id;\r\n        const subregion = await atlasFileReader.getSubRegion(regionId);\r\n        if (subregion != undefined) {\r\n          return subregion;\r\n        } else {\r\n          return;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error requesting subregions: \", error);\r\n      return;\r\n    }\r\n  } else {\r\n    console.error(\"Error requesting subregions: region name is required!\");\r\n    return;\r\n  }\r\n}\r\n\r\n/**\r\n * This function gives you list of countries with some special informations.\r\n * \r\n * @param {boolean} currency do you want currency of country?\r\n * @param {boolean} dialCode do you want dial code of country?\r\n * @param {boolean} native do you want native of country?\r\n * @param {boolean} nationality do you want nationality of country?\r\n * @param {boolean} region do you want region of country?\r\n * @param {boolean} subregion do you want subregion of country?\r\n * @param {boolean} translations do you want translations of country?\r\n * @param {boolean} timezones do you want timezones of country?\r\n * @param {boolean} geolocation do you want geolocation of country?\r\n * @param {boolean} emojies do you want emojies of country?\r\n * @param {boolean} domain do you want domain of country?\r\n * @returns {Promise<object>} A Promise that resolves to an array of countries with some special informations if you want.\r\n */\r\nexport async function getAllCountries(\r\n  currency,\r\n  dialCode,\r\n  native,\r\n  nationality,\r\n  region,\r\n  subregion,\r\n  translations,\r\n  timezones,\r\n  geolocation,\r\n  emojies,\r\n  domain\r\n) {\r\n  try {\r\n    const countries = await atlasFileReader.getCountries(\r\n      currency,\r\n      dialCode,\r\n      native,\r\n      nationality,\r\n      region,\r\n      subregion,\r\n      translations,\r\n      timezones,\r\n      geolocation,\r\n      emojies,\r\n      domain\r\n    );\r\n    if (countries != undefined) {\r\n      return countries;\r\n    } else {\r\n      return;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error requesting countries: \", error);\r\n  }\r\n}\r\n\r\n/**\r\n * This function returns an array of country name and capitals.\r\n *\r\n * @param {string} country Country name if you want to get capital of a specific country\r\n * @returns {Promise<object>} A promise that resolves to an array of country name, country capital and iso2&3\r\n */\r\nexport async function getAllCapitals(country) {\r\n  if (country && country !== \"\") {\r\n    let data = JSON.stringify({\r\n      country: country,\r\n    });\r\n    let headers = {\r\n      \"Content-Type\": \"application/json\",\r\n    };\r\n    let url = \"https://countriesnow.space/api/v0.1/countries/capital\";\r\n\r\n    const response = await sendRequest(url, data, \"post\", headers);\r\n\r\n    if (!response.error) {\r\n      return response.data;\r\n    } else {\r\n      if (\r\n        isAxiosError(response.msg) &&\r\n        response.msg.response &&\r\n        response.msg.response.status == 404\r\n      ) {\r\n        return {\r\n          error: true,\r\n          msg: `Country ${country} is not exist!`,\r\n        };\r\n      }\r\n    }\r\n  } else {\r\n    let url = \"https://countriesnow.space/api/v0.1/countries/capital\";\r\n\r\n    const response = await sendRequest(url);\r\n\r\n    if (!response.error) {\r\n      return response.data;\r\n    } else {\r\n      return {\r\n        error: true,\r\n        msg: response.msg,\r\n      };\r\n    }\r\n  }\r\n}\r\n"],"names":["_catch","body","recover","result","e","then","sendRequest","url","data","method","headers","axios","request","maxBodyLength","Infinity","response","error","msg","atlasFileReader","AtlasFileReader","_proto","prototype","getRegions","Promise","resolve","fsPromises","readFile","JSON","parse","err","console","reject","getRegionByName","regName","isNaN","Number","_step","_iterator","_createForOfIteratorHelperLoose","done","region","value","name","toLowerCase","getSubRegion","regionId","subregions","_iterator2","_step2","subregion","push","length","getCountries","currency","dialCode","native","nationality","translations","timezones","geolocation","emojies","domain","countries","promises","_step3","_iterator3","country","countryObj","stringify","isAxiosError","status","undefined","findedRegion","id"],"mappings":"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"}
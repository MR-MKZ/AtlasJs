{"version":3,"file":"index.umd.js","sources":["../src/extension.js","../src/index.js"],"sourcesContent":["import axios, { isAxiosError } from \"axios\";\r\nimport { promises as fsPromises } from \"fs\";\r\n\r\nexport function sendRequest(url, data = \"{}\", method = \"get\", headers = {}) {\r\n  let config = {\r\n    method: method,\r\n    maxBodyLength: Infinity,\r\n    url: url,\r\n    headers: headers,\r\n    data: data,\r\n  };\r\n\r\n  return axios\r\n    .request(config)\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch((error) => {\r\n      return {\r\n        error: true,\r\n        msg: error,\r\n      };\r\n    });\r\n}\r\n\r\nexport class AtlasFileReader {\r\n  constructor() {}\r\n\r\n  async getRegions() {\r\n    try {\r\n      const data = await fsPromises.readFile(\"./assets/regions.json\", \"utf8\");\r\n      return JSON.parse(data);\r\n    } catch (err) {\r\n      console.error(\"Error reading JSON file:\", err);\r\n      return;\r\n    }\r\n  }\r\n\r\n  async getRegionByName(regName) {\r\n    try {\r\n      const data = await fsPromises.readFile(\"./assets/regions.json\", \"utf8\");\r\n      for (const region of JSON.parse(data)) {\r\n        if (region.name.toLowerCase() === regName.toLowerCase()) {\r\n          return region;\r\n        }\r\n      }\r\n      console.error(`Region ${regName} not found`);\r\n      return;\r\n    } catch (err) {\r\n      console.error(\"Error reading JSON file:\", err);\r\n      return;\r\n    }\r\n  }\r\n\r\n  async getSubRegion(regionId) {\r\n    let subregions = [];\r\n    try {\r\n      const data = await fsPromises.readFile(\r\n        \"./assets/subregions.json\",\r\n        \"utf8\"\r\n      );\r\n      for (const subregion of JSON.parse(data)) {\r\n        if (subregion[\"region_id\"] == regionId) {\r\n          subregions.push(subregion);\r\n        }\r\n      }\r\n      if (subregions.length == 0) {\r\n        console.error(`Subregion with region id ${regionId} not found`);\r\n        return;\r\n      } else {\r\n        return subregions;\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error reading JSON file:\", err);\r\n      return;\r\n    }\r\n  }\r\n}\r\n","import axios, { isAxiosError } from \"axios\";\r\nimport { sendRequest, AtlasFileReader } from \"./extension.js\";\r\n\r\nconst atlasFileReader = new AtlasFileReader();\r\n\r\n/**\r\n * This function returns and object that contains list of all regions.\r\n *\r\n * @returns {Promise<object>} A Promise that resolves to an array of regions.\r\n */\r\nexport async function getAllRegions() {\r\n  try {\r\n    const regions = await atlasFileReader.getRegions();\r\n    return regions;\r\n  } catch (error) {\r\n    console.error(\"Error getting regions: \", error);\r\n    return;\r\n  }\r\n}\r\n\r\n/**\r\n * This function return subregions of a region.\r\n * \r\n * @param {string} region region name to get subregions.\r\n * @returns {Promise<object>} A Promise that resolves to an array of subregions of entered region.\r\n */\r\nexport async function getSubRegions(region) {\r\n  if (region && region !== \"\") {\r\n    try {\r\n      const findedRegion = await atlasFileReader.getRegionByName(region);\r\n      let regionId = findedRegion.id;\r\n      if (regionId != undefined) {\r\n        const subregion = await atlasFileReader.getSubRegion(regionId);\r\n        if (subregion != undefined) {\r\n          return subregion;\r\n        } else {\r\n          return;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error getting subregions: \", error);\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * This function fetches data from an API and returns an array of countries.\r\n *\r\n * @param {boolean} flag Need flag of country or not.\r\n * @param {boolean} currency Need currency of country or not.\r\n * @param {boolean} dialCode Need dial code of country or not.\r\n * @returns {Promise<object>} A Promise that resolves to an array of countries fetched from the API.\r\n */\r\nexport async function getAllCountries(flag, currency, dialCode) {\r\n  const moreInfo = [];\r\n  const countries = [];\r\n\r\n  flag && moreInfo.push(\"flag\");\r\n  currency && moreInfo.push(\"currency\");\r\n  dialCode && moreInfo.push(\"dialCode\");\r\n\r\n  let url =\r\n    moreInfo.length > 0\r\n      ? `https://countriesnow.space/api/v0.1/countries/info?returns=${moreInfo.join(\r\n          \",\"\r\n        )}`\r\n      : \"https://countriesnow.space/api/v0.1/countries/positions\";\r\n\r\n  const response = await sendRequest(url);\r\n\r\n  if (!response.error) {\r\n    if (moreInfo.length == 0) {\r\n      for (let country of response.data) {\r\n        countries.push(country[\"name\"]);\r\n      }\r\n      return countries;\r\n    } else {\r\n      return response.data;\r\n    }\r\n  } else {\r\n    return {\r\n      error: true,\r\n      msg: response.msg,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * This function returns an array of country name and capitals.\r\n *\r\n * @param {string} country Country name if you want to get capital of a specific country\r\n * @returns {Promise<object>} A promise that resolves to an array of country name, country capital and iso2&3\r\n */\r\nexport async function getAllCapitals(country) {\r\n  if (country && country !== \"\") {\r\n    let data = JSON.stringify({\r\n      country: country,\r\n    });\r\n    let headers = {\r\n      \"Content-Type\": \"application/json\",\r\n    };\r\n    let url = \"https://countriesnow.space/api/v0.1/countries/capital\";\r\n\r\n    const response = await sendRequest(url, data, \"post\", headers);\r\n\r\n    if (!response.error) {\r\n      return response.data;\r\n    } else {\r\n      if (\r\n        isAxiosError(response.msg) &&\r\n        response.msg.response &&\r\n        response.msg.response.status == 404\r\n      ) {\r\n        return {\r\n          error: true,\r\n          msg: `Country ${country} is not exist!`,\r\n        };\r\n      }\r\n    }\r\n  } else {\r\n    let url = \"https://countriesnow.space/api/v0.1/countries/capital\";\r\n\r\n    const response = await sendRequest(url);\r\n\r\n    if (!response.error) {\r\n      return response.data;\r\n    } else {\r\n      return {\r\n        error: true,\r\n        msg: response.msg,\r\n      };\r\n    }\r\n  }\r\n}\r\n"],"names":["_catch","body","recover","result","e","then","sendRequest","url","data","method","headers","axios","request","maxBodyLength","Infinity","response","error","msg","atlasFileReader","AtlasFileReader","_proto","prototype","getRegions","Promise","resolve","fsPromises","readFile","JSON","parse","err","console","reject","getRegionByName","regName","promises","_step","_iterator","_createForOfIteratorHelperLoose","done","region","value","name","toLowerCase","getSubRegion","regionId","subregions","_iterator2","_step2","subregion","push","length","country","stringify","isAxiosError","status","flag","currency","dialCode","moreInfo","countries","join","findedRegion","id","undefined"],"mappings":"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"}
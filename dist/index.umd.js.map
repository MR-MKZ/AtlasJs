{"version":3,"file":"index.umd.js","sources":["../src/index.js"],"sourcesContent":["import axios, { isAxiosError } from \"axios\";\r\n\r\nfunction sendRequest(url, data = \"{}\", method = \"get\", headers = {}) {\r\n  let config = {\r\n    method: method,\r\n    maxBodyLength: Infinity,\r\n    url: url,\r\n    headers: headers,\r\n    data: data,\r\n  };\r\n\r\n  return axios\r\n    .request(config)\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch((error) => {\r\n      return {\r\n        error: true,\r\n        msg: error,\r\n      };\r\n    });\r\n}\r\n\r\n/**\r\n * This function fetches data from an API and returns an array of countries.\r\n *\r\n * @param {boolean} flag Need flag of country or not.\r\n * @param {boolean} currency Need currency of country or not.\r\n * @param {boolean} dialCode Need dial code of country or not.\r\n * @returns {Promise<object>} A Promise that resolves to an array of countries fetched from the API.\r\n */\r\nexport async function getAllCountries(flag, currency, dialCode) {\r\n  const moreInfo = [];\r\n  const countries = [];\r\n\r\n  flag && moreInfo.push(\"flag\");\r\n  currency && moreInfo.push(\"currency\");\r\n  dialCode && moreInfo.push(\"dialCode\");\r\n\r\n  let url =\r\n    moreInfo.length > 0\r\n      ? `https://countriesnow.space/api/v0.1/countries/info?returns=${moreInfo.join(\r\n          \",\"\r\n        )}`\r\n      : \"https://countriesnow.space/api/v0.1/countries/positions\";\r\n\r\n  const response = await sendRequest(url);\r\n\r\n  if (!response.error) {\r\n    if (moreInfo.length == 0) {\r\n      for (let country of response.data) {\r\n        countries.push(country[\"name\"]);\r\n      }\r\n      return countries;\r\n    } else {\r\n      return response.data;\r\n    }\r\n  } else {\r\n    return {\r\n      error: true,\r\n      msg: response.msg,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * This function returns an array of country name and capitals.\r\n * \r\n * @param {string} country Country name if you want to get capital of a specific country\r\n * @returns {Promise<object>} A promise that resolves to an array of country name, country capital and iso2&3\r\n */\r\nexport async function getAllCapitals(country) {\r\n  if (country && country !== \"\") {\r\n    let data = JSON.stringify({\r\n      country: country,\r\n    });\r\n    let headers = {\r\n      \"Content-Type\": \"application/json\",\r\n    };\r\n    let url = \"https://countriesnow.space/api/v0.1/countries/capital\";\r\n\r\n    const response = await sendRequest(url, data, \"post\", headers);\r\n\r\n    if (!response.error) {\r\n      return response.data;\r\n    } else {\r\n      if (\r\n        isAxiosError(response.msg) &&\r\n        response.msg.response &&\r\n        response.msg.response.status == 404\r\n      ) {\r\n        return {\r\n          error: true,\r\n          msg: `Country ${country} is not exist!`,\r\n        };\r\n      }\r\n    }\r\n  } else {\r\n    let url = \"https://countriesnow.space/api/v0.1/countries/capital\";\r\n\r\n    const response = await sendRequest(url);\r\n\r\n    if (!response.error) {\r\n      return response.data;\r\n    } else {\r\n      return {\r\n        error: true,\r\n        msg: response.msg,\r\n      };\r\n    }\r\n  }\r\n}\r\n"],"names":["sendRequest","url","data","method","headers","axios","request","maxBodyLength","Infinity","then","response","error","msg","country","Promise","resolve","JSON","stringify","isAxiosError","status","e","reject","flag","currency","dialCode","moreInfo","countries","push","length","join","_step","_iterator","_createForOfIteratorHelperLoose","done","value"],"mappings":"wcAEA,SAASA,EAAYC,EAAKC,EAAaC,EAAgBC,GASrD,YATwBF,IAAAA,IAAAA,EAAO,WAAY,IAANC,IAAAA,EAAS,YAAOC,IAAAA,IAAAA,EAAU,CAAA,GASxDC,EAAK,QACTC,QATU,CACXH,OAAQA,EACRI,cAAeC,SACfP,IAAKA,EACLG,QAASA,EACTF,KAAMA,IAKLO,KAAK,SAACC,GACL,OAAOA,EAASR,IAClB,GAAE,MACK,SAACS,GACN,MAAO,CACLA,OAAO,EACPC,IAAKD,EAET,EACJ,2BAkDqCE,GAAO,WAAEC,QAAAC,QAAA,WAAA,GACxCF,GAAuB,KAAZA,EACb,CAAA,IAAIX,EAAOc,KAAKC,UAAU,CACxBJ,QAASA,IAKuD,OAAAC,QAAAC,QAE3Cf,EAFb,wDAE8BE,EAAM,OALhC,CACZ,eAAgB,sBAI4CO,KAAxDC,SAAAA,GAEF,OAACA,EAASC,MAIVO,EAAYA,aAACR,EAASE,MACtBF,EAASE,IAAIF,UACmB,KAAhCA,EAASE,IAAIF,SAASS,OAEf,CACLR,OAAO,EACPC,IAAgBC,WAAAA,yBATC,EAAdH,EAASR,IAUZ,EAAA,CAI4D,OAAAY,QAAAC,QAE3Cf,EAFb,0DAE6BS,cAAjCC,GAAQ,OAETA,EAASC,MAGL,CACLA,OAAO,EACPC,IAAKF,EAASE,KAJTF,EAASR,IAQtB,EAAA,CAxC8C,GAwC9C,CAAC,MAAAkB,GAAA,OAAAN,QAAAO,OAAAD,EAhFD,CAAA,oBAAsB,SAAgBE,EAAMC,EAAUC,OACpD,IAAMC,EAAW,GACXC,EAAY,GAElBJ,GAAQG,EAASE,KAAK,QACtBJ,GAAYE,EAASE,KAAK,YAC1BH,GAAYC,EAASE,KAAK,YAE1B,IAAI1B,EACFwB,EAASG,OAAS,EAAC,8DAC+CH,EAASI,KACrE,KAEF,0DAA0D,OAAAf,QAAAC,QAEzCf,EAAYC,IAAIQ,KAAA,SAAjCC,GAAQ,GAETA,EAASC,MAUZ,MAAO,CACLA,OAAO,EACPC,IAAKF,EAASE,KAZC,GACM,GAAnBa,EAASG,OACX,CAAA,IAAA,IAAiCE,EAAjCC,6pBAAAC,CAAoBtB,EAASR,QAAI4B,EAAAC,KAAAE,MAC/BP,EAAUC,KADIG,EAAAI,MACe,MAE/B,OAAOR,CAAU,CAEjB,OAAOhB,EAASR,IAQtB,EAAA,CAAC,MAAAkB,UAAAN,QAAAO,OAAAD,EAAA,CAAA"}
var r=require("axios"),e=require("fs");function n(r){return r&&"object"==typeof r&&"default"in r?r:{default:r}}var t=/*#__PURE__*/n(r);function o(r,e){(null==e||e>r.length)&&(e=r.length);for(var n=0,t=Array(e);n<e;n++)t[n]=r[n];return t}function i(r,e){var n="undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(n)return(n=n.call(r)).next.bind(n);if(Array.isArray(r)||(n=function(r,e){if(r){if("string"==typeof r)return o(r,e);var n={}.toString.call(r).slice(8,-1);return"Object"===n&&r.constructor&&(n=r.constructor.name),"Map"===n||"Set"===n?Array.from(r):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?o(r,e):void 0}}(r))||e&&r&&"number"==typeof r.length){n&&(r=n);var t=0;return function(){return t>=r.length?{done:!0}:{done:!1,value:r[t++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function s(r,e){try{var n=r()}catch(r){return e(r)}return n&&n.then?n.then(void 0,e):n}function u(r,e,n,o){return void 0===e&&(e="{}"),void 0===n&&(n="get"),void 0===o&&(o={}),t.default.request({method:n,maxBodyLength:Infinity,url:r,headers:o,data:e}).then(function(r){return r.data}).catch(function(r){return{error:!0,msg:r}})}function a(r,e){try{var n=r()}catch(r){return e(r)}return n&&n.then?n.then(void 0,e):n}var c=new(/*#__PURE__*/function(){function r(){}var n=r.prototype;return n.getRegions=function(){try{return Promise.resolve(s(function(){return Promise.resolve(e.promises.readFile("./assets/regions.json","utf8")).then(JSON.parse)},function(r){console.error("Error reading JSON file:",r)}))}catch(r){return Promise.reject(r)}},n.getRegionByName=function(r){try{return Promise.resolve(s(function(){if(isNaN(Number(r)))return Promise.resolve(e.promises.readFile("./assets/regions.json","utf8")).then(function(e){for(var n,t=i(JSON.parse(e));!(n=t()).done;){var o=n.value;if(o.name.toLowerCase()===r.toLowerCase())return o}console.error("Region "+r+" not found")});console.error("Error finding region: region name can not be Number")},function(r){console.error("Error reading JSON file:",r)}))}catch(r){return Promise.reject(r)}},n.getSubRegion=function(r){try{var n=[];return Promise.resolve(s(function(){return Promise.resolve(e.promises.readFile("./assets/subregions.json","utf8")).then(function(e){for(var t,o=i(JSON.parse(e));!(t=o()).done;){var s=t.value;s.region_id==r&&n.push(s)}if(0!=n.length)return n;console.error("Subregion with region id "+r+" not found")})},function(r){console.error("Error reading JSON file:",r)}))}catch(r){return Promise.reject(r)}},r}());exports.getAllCapitals=function(e){try{return Promise.resolve(function(){if(e&&""!==e){var n=JSON.stringify({country:e});return Promise.resolve(u("https://countriesnow.space/api/v0.1/countries/capital",n,"post",{"Content-Type":"application/json"})).then(function(n){return n.error?r.isAxiosError(n.msg)&&n.msg.response&&404==n.msg.response.status?{error:!0,msg:"Country "+e+" is not exist!"}:void 0:n.data})}return Promise.resolve(u("https://countriesnow.space/api/v0.1/countries/capital")).then(function(r){return r.error?{error:!0,msg:r.msg}:r.data})}())}catch(r){return Promise.reject(r)}},exports.getAllCountries=function(r,e,n){try{var t=[],o=[];r&&t.push("flag"),e&&t.push("currency"),n&&t.push("dialCode");var s=t.length>0?"https://countriesnow.space/api/v0.1/countries/info?returns="+t.join(","):"https://countriesnow.space/api/v0.1/countries/positions";return Promise.resolve(u(s)).then(function(r){if(r.error)return{error:!0,msg:r.msg};if(0==t.length){for(var e,n=i(r.data);!(e=n()).done;)o.push(e.value.name);return o}return r.data})}catch(r){return Promise.reject(r)}},exports.getAllRegions=function(){try{return Promise.resolve(a(function(){return Promise.resolve(c.getRegions())},function(r){console.error("Error getting regions: ",r)}))}catch(r){return Promise.reject(r)}},exports.getSubRegions=function(r){try{return Promise.resolve(function(){if(r&&""!==r)return a(function(){return Promise.resolve(c.getRegionByName(r)).then(function(r){return function(){if(null!=r)return Promise.resolve(c.getSubRegion(r.id)).then(function(r){if(null!=r)return r})}()})},function(r){console.error("Error getting subregions: ",r)});console.error("Error getting subregions: region name is required!")}())}catch(r){return Promise.reject(r)}};
//# sourceMappingURL=index.cjs.map

{"version":3,"file":"index.cjs","sources":["../src/AtlasError.js","../src/extension.js","../src/index.js"],"sourcesContent":["class AtlasError extends Error {\r\n  constructor(message, type, tips, data) {\r\n    super(message);\r\n\r\n    this.name = \"AtlasError -> \" + type\r\n    if (tips) {\r\n      this.tips = tips\r\n    }\r\n    if (data) {\r\n      this.data = data\r\n    }\r\n  }\r\n}\r\n\r\nexport function raiseError(message, type, tips, data) {\r\n  throw new AtlasError(message, type, tips, data)\r\n}","import axios from \"axios\";\r\nimport {promises as fsPromises} from \"fs\";\r\nimport {raiseError} from \"./AtlasError.js\";\r\n\r\nexport function sendRequest(url, data = \"{}\", method = \"get\", headers = {}) {\r\n    let config = {\r\n        method: method,\r\n        maxBodyLength: Infinity,\r\n        url: url,\r\n        headers: headers,\r\n        data: data,\r\n    };\r\n\r\n    return axios\r\n        .request(config)\r\n        .then((response) => {\r\n            return response.data;\r\n        })\r\n        .catch((error) => {\r\n            return {\r\n                error: true,\r\n                msg: error,\r\n            };\r\n        });\r\n}\r\n\r\nexport class AtlasFileReader {\r\n    constructor() {\r\n    }\r\n\r\n    async getRegions() {\r\n        const data = await fsPromises.readFile(\"./assets/regions.json\", \"utf8\");\r\n        return JSON.parse(data);\r\n    }\r\n\r\n    async getRegionByName(regName) {\r\n        if (isNaN(Number(regName))) {\r\n            const data = await fsPromises.readFile(\"./assets/regions.json\", \"utf8\");\r\n            for (const region of JSON.parse(data)) {\r\n                if (region.name.toLowerCase() === regName.toLowerCase()) {\r\n                    return region;\r\n                }\r\n            }\r\n            raiseError(`region ${regName} not found`, \"RESULT_NOT_FOUND\");\r\n        } else {\r\n            raiseError(\"region name must be string\", \"INPUT_TYPE_ERR\")\r\n        }\r\n    }\r\n\r\n    async getSubRegion(regionId) {\r\n        let subregions = [];\r\n        const data = await fsPromises.readFile(\r\n            \"./assets/subregions.json\",\r\n            \"utf8\"\r\n        );\r\n        for (const subregion of JSON.parse(data)) {\r\n            if (subregion[\"region_id\"] == regionId) {\r\n                subregions.push(subregion);\r\n            }\r\n        }\r\n        if (subregions.length === 0) {\r\n            raiseError(`Subregion with region id ${regionId} not found`, \"RESULT_NOT_FOUND\")\r\n        } else {\r\n            return subregions;\r\n        }\r\n    }\r\n\r\n    async getCountries(\r\n        currency,\r\n        dialCode,\r\n        native,\r\n        nationality,\r\n        region,\r\n        subregion,\r\n        translations,\r\n        timezones,\r\n        geolocation,\r\n        emojies,\r\n        domain\r\n    ) {\r\n        let countries = [];\r\n        const data = await fsPromises.readFile(\r\n            \"./assets/countries_states_cities.json\",\r\n            \"utf8\"\r\n        );\r\n        for (const country of JSON.parse(data)) {\r\n            let countryObj = {};\r\n            countryObj[\"id\"] = country[\"id\"];\r\n            countryObj[\"name\"] = country[\"name\"];\r\n            countryObj[\"iso2\"] = country[\"iso2\"];\r\n            countryObj[\"iso3\"] = country[\"iso3\"];\r\n            countryObj[\"capital\"] = country[\"capital\"];\r\n            if (dialCode) countryObj[\"phone_code\"] = country[\"phone_code\"];\r\n            if (currency) {\r\n                countryObj[\"currency\"] = country[\"currency\"];\r\n                countryObj[\"currency_name\"] = country[\"currency_name\"];\r\n                countryObj[\"currency_symbol\"] = country[\"currency_symbol\"];\r\n            }\r\n            if (domain) countryObj[\"domain\"] = country[\"tld\"];\r\n            if (native) countryObj[\"native\"] = country[\"native\"];\r\n            if (nationality) countryObj[\"nationality\"] = country[\"nationality\"];\r\n            if (region) {\r\n                countryObj[\"region\"] = country[\"region\"];\r\n                countryObj[\"region_id\"] = country[\"region_id\"];\r\n            }\r\n            if (subregion) {\r\n                countryObj[\"subregion\"] = country[\"subregion\"];\r\n                countryObj[\"subregion_id\"] = country[\"subregion_id\"];\r\n            }\r\n            if (translations) countryObj[\"translations\"] = country[\"translations\"];\r\n\r\n            if (timezones) countryObj[\"timezones\"] = country[\"timezones\"];\r\n\r\n            if (geolocation) {\r\n                countryObj[\"latitude\"] = country[\"latitude\"];\r\n                countryObj[\"longitude\"] = country[\"longitude\"];\r\n            }\r\n\r\n            if (emojies) {\r\n                countryObj[\"emoji\"] = country[\"emoji\"];\r\n                countryObj[\"emojiU\"] = country[\"emojiU\"];\r\n            }\r\n            countries.push(countryObj);\r\n        }\r\n        return countries;\r\n    }\r\n\r\n    async getStates(countryName, iso3, iso2, geolocation) {\r\n        if (\r\n            (countryName !== undefined &&\r\n                countryName != null &&\r\n                isNaN(Number(countryName))) || (iso3 !== undefined && isNaN(Number(iso3))) || (iso2 !== undefined && isNaN(Number(iso2)))\r\n        ) {\r\n            let states = [];\r\n            const data = await fsPromises.readFile(\r\n                \"./assets/countries_states_cities.json\",\r\n                \"utf8\"\r\n            );\r\n            for (const country of JSON.parse(data)) {\r\n                if (\r\n                    (countryName !== undefined &&\r\n                        countryName != null &&\r\n                        country[\"name\"].toLowerCase() === countryName.toLowerCase()) || (iso3 !== undefined && country[\"iso3\"].toLowerCase() === iso3.toLowerCase()) || (iso2 !== undefined && country[\"iso2\"].toLowerCase() === iso2.toLowerCase())\r\n                ) {\r\n                    for (const state of country[\"states\"]) {\r\n                        let statesObj = {};\r\n                        statesObj[\"id\"] = state[\"id\"];\r\n                        statesObj[\"name\"] = state[\"name\"];\r\n                        statesObj[\"state_code\"] = state[\"state_code\"];\r\n                        if (geolocation) {\r\n                            statesObj[\"latitude\"] = state[\"latitude\"];\r\n                            statesObj[\"longitude\"] = state[\"longitude\"];\r\n                        }\r\n                        states.push(statesObj);\r\n                    }\r\n                }\r\n            }\r\n            if (states.length === 0) {\r\n                raiseError(`Country ${countryName} not found`, \"RESULT_NOT_FOUND\", {\r\n                    \"country_name\": \"check entered country name: \" + countryName,\r\n                    \"iso3\": \"check entered iso3: \" + iso3,\r\n                    \"iso2\": \"check entered iso2: \" + iso2\r\n                })\r\n            } else {\r\n                return states;\r\n            }\r\n        } else {\r\n            raiseError(\"region name must be string\", \"INPUT_TYPE_ERR\")\r\n        }\r\n    }\r\n}\r\n","import {AtlasFileReader} from \"./extension.js\";\r\nimport {raiseError} from \"./AtlasError.js\";\r\n\r\nconst atlasFileReader = new AtlasFileReader();\r\n\r\n/**\r\n * This function returns and object that contains list of all regions.\r\n *\r\n * @returns {Promise<object>} A Promise that resolves to an array of regions.\r\n */\r\nexport async function getAllRegions() {\r\n    return await atlasFileReader.getRegions();\r\n}\r\n\r\n/**\r\n * This function return subregions of a region.\r\n *\r\n * @param {string} region region name to get subregions.\r\n * @returns {Promise<object>} A Promise that resolves to an array of subregions of entered region.\r\n */\r\nexport async function getSubRegions(region) {\r\n    if (region && region !== \"\") {\r\n        const foundRegion = await atlasFileReader.getRegionByName(region);\r\n        if (foundRegion !== undefined) {\r\n            let regionId = foundRegion.id;\r\n            return await atlasFileReader.getSubRegion(regionId);\r\n        }\r\n    } else {\r\n        raiseError(\"region name is required!\", \"MISSING_REQUIRED_VALUE\")\r\n    }\r\n}\r\n\r\n/**\r\n * This function gives you list of countries with some special information.\r\n *\r\n * @param {boolean} currency do you want currency of country?\r\n * @param {boolean} dialCode do you want dial code of country?\r\n * @param {boolean} native do you want native of country?\r\n * @param {boolean} nationality do you want nationality of country?\r\n * @param {boolean} region do you want region of country?\r\n * @param {boolean} subregion do you want subregion of country?\r\n * @param {boolean} translations do you want translations of country?\r\n * @param {boolean} timezones do you want timezones of country?\r\n * @param {boolean} geolocation do you want geolocation of country?\r\n * @param {boolean} emojies do you want emojies of country?\r\n * @param {boolean} domain do you want domain of country?\r\n * @returns {Promise<object>} A Promise that resolves to an array of countries with some special information if you want.\r\n */\r\nexport async function getAllCountries(\r\n    currency,\r\n    dialCode,\r\n    native,\r\n    nationality,\r\n    region,\r\n    subregion,\r\n    translations,\r\n    timezones,\r\n    geolocation,\r\n    emojies,\r\n    domain\r\n) {\r\n    return await atlasFileReader.getCountries(\r\n        currency,\r\n        dialCode,\r\n        native,\r\n        nationality,\r\n        region,\r\n        subregion,\r\n        translations,\r\n        timezones,\r\n        geolocation,\r\n        emojies,\r\n        domain\r\n    );\r\n}\r\n\r\n/**\r\n * This function gives you states of a country.\r\n *\r\n * @param {string} country country name to get states\r\n * @param {string} iso3 country iso3 to get states\r\n * @param {string} iso2 country iso2 to get states\r\n * @param {boolean} geolocation do you want geolocation of each country state?\r\n * @returns {Promise<object>} A Promise that resolves to an array of country states with some special informations if you want.\r\n */\r\nexport async function getCountryStates(country, iso3, iso2, geolocation) {\r\n    if (\r\n        (country && country !== \"\") ||\r\n        (iso3 && iso3 !== \"\") ||\r\n        (iso2 && iso2 !== \"\")\r\n    ) {\r\n        if (country != null && country != undefined) {\r\n            country = country.toString();\r\n        }\r\n        if (iso3 != null && iso3 !== undefined) {\r\n            iso3 = iso3.toString();\r\n        }\r\n        if (iso2 != null && iso2 != undefined) {\r\n            iso2 = iso2.toString();\r\n        }\r\n        return await atlasFileReader.getStates(\r\n            country,\r\n            iso3,\r\n            iso2,\r\n            geolocation\r\n        );\r\n    } else {\r\n        raiseError(\"country name, iso3 or iso2 is missing, at least one of them is required!\", \"MISSING_REQUIRED_VALUE\")\r\n    }\r\n}\r\n"],"names":["AtlasError","_Error","message","type","tips","data","_this","call","name","_wrapNativeSuper","Error","raiseError","atlasFileReader","AtlasFileReader","_proto","prototype","getRegions","Promise","resolve","fsPromises","readFile","then","JSON","parse","e","reject","getRegionByName","regName","isNaN","Number","_iterator","_step","_createForOfIteratorHelperLoose","done","region","value","toLowerCase","getSubRegion","regionId","subregions","_iterator2","_step2","subregion","push","length","getCountries","currency","dialCode","native","nationality","translations","timezones","geolocation","emojies","domain","countries","_iterator3","_step3","country","countryObj","getStates","countryName","iso3","iso2","undefined","states","promises","_iterator4","_step4","_step5","_iterator5","state","statesObj","country_name","toString","foundRegion","id"],"mappings":"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"}
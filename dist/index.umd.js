!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports,require("axios"),require("fs")):"function"==typeof define&&define.amd?define(["exports","axios","fs"],r):r((e||self).atlas={},0,e.fs)}(this,function(e,r,n){function o(e,r){(null==r||r>e.length)&&(r=e.length);for(var n=0,o=Array(r);n<r;n++)o[n]=e[n];return o}function t(e,r){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(n)return(n=n.call(e)).next.bind(n);if(Array.isArray(e)||(n=function(e,r){if(e){if("string"==typeof e)return o(e,r);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?o(e,r):void 0}}(e))||r&&e&&"number"==typeof e.length){n&&(e=n);var t=0;return function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function i(e,r){try{var n=e()}catch(e){return r(e)}return n&&n.then?n.then(void 0,r):n}function s(e,r){try{var n=e()}catch(e){return r(e)}return n&&n.then?n.then(void 0,r):n}var u=new(/*#__PURE__*/function(){function e(){}var r=e.prototype;return r.getRegions=function(){try{return Promise.resolve(i(function(){return Promise.resolve(n.promises.readFile("./assets/regions.json","utf8")).then(JSON.parse)},function(e){console.error("Error reading JSON file:",e)}))}catch(e){return Promise.reject(e)}},r.getRegionByName=function(e){try{return Promise.resolve(i(function(){if(isNaN(Number(e)))return Promise.resolve(n.promises.readFile("./assets/regions.json","utf8")).then(function(r){for(var n,o=t(JSON.parse(r));!(n=o()).done;){var i=n.value;if(i.name.toLowerCase()===e.toLowerCase())return i}console.error("Region "+e+" not found")});console.error("Error finding region: region name can not be Number or Boolean")},function(e){console.error("Error reading JSON file:",e)}))}catch(e){return Promise.reject(e)}},r.getSubRegion=function(e){try{var r=[];return Promise.resolve(i(function(){return Promise.resolve(n.promises.readFile("./assets/subregions.json","utf8")).then(function(n){for(var o,i=t(JSON.parse(n));!(o=i()).done;){var s=o.value;s.region_id==e&&r.push(s)}if(0!=r.length)return r;console.error("Subregion with region id "+e+" not found")})},function(e){console.error("Error reading JSON file:",e)}))}catch(e){return Promise.reject(e)}},r.getCountries=function(e,r,o,s,u,a,l,c,f,g,m){try{return Promise.resolve(i(function(){var i=[];return Promise.resolve(n.promises.readFile("./assets/countries_states_cities.json","utf8")).then(function(n){for(var d,v=t(JSON.parse(n));!(d=v()).done;){var y=d.value,h={};h.id=y.id,h.name=y.name,h.iso2=y.iso2,h.iso3=y.iso3,h.capital=y.capital,r&&(h.phone_code=y.phone_code),e&&(h.currency=y.currency,h.currency_name=y.currency_name,h.currency_symbol=y.currency_symbol),m&&(h.domain=y.tld),o&&(h.native=y.native),s&&(h.nationality=y.nationality),u&&(h.region=y.region,h.region_id=y.region_id),a&&(h.subregion=y.subregion,h.subregion_id=y.subregion_id),l&&(h.translations=y.translations),c&&(h.timezones=y.timezones),f&&(h.latitude=y.latitude,h.longitude=y.longitude),g&&(h.emoji=y.emoji,h.emojiU=y.emojiU),i.push(h)}return i})},function(e){console.error("Error getting countries:",e)}))}catch(e){return Promise.reject(e)}},r.getStates=function(e,r,o,s){try{return Promise.resolve(i(function(){if(null!=e&&null!=e&&isNaN(Number(e))||null!=r&&null!=r&&isNaN(Number(r))||null!=o&&null!=o&&isNaN(Number(o))){var i=[];return Promise.resolve(n.promises.readFile("./assets/countries_states_cities.json","utf8")).then(function(n){for(var u,a=t(JSON.parse(n));!(u=a()).done;){var l=u.value;if(null!=e&&null!=e&&l.name.toLowerCase()==e.toLowerCase()||null!=r&&null!=r&&l.iso3.toLowerCase()==r.toLowerCase()||null!=o&&null!=o&&l.iso2.toLowerCase()==o.toLowerCase())for(var c,f=t(l.states);!(c=f()).done;){var g=c.value,m={};m.id=g.id,m.name=g.name,m.state_code=g.state_code,s&&(m.latitude=g.latitude,m.longitude=g.longitude),i.push(m)}}if(0!=i.length)return i;console.error("Country "+e+" not found")})}console.error("Error getting country state: country name can not be Number or Boolean")},function(e){console.error("Error getting country states:",e)}))}catch(e){return Promise.reject(e)}},e}());e.getAllCountries=function(e,r,n,o,t,i,a,l,c,f,g){try{return Promise.resolve(s(function(){return Promise.resolve(u.getCountries(e,r,n,o,t,i,a,l,c,f,g)).then(function(e){if(null!=e)return e})},function(e){console.error("Error requesting countries: ",e)}))}catch(e){return Promise.reject(e)}},e.getAllRegions=function(){try{return Promise.resolve(s(function(){return Promise.resolve(u.getRegions())},function(e){console.error("Error requesting regions: ",e)}))}catch(e){return Promise.reject(e)}},e.getCountryStates=function(e,r,n,o){try{return Promise.resolve(function(){if(e&&""!=e||r&&""!=r||n&&""!=n)return s(function(){return null!=e&&null!=e&&(e=e.toString()),null!=r&&null!=r&&(r=r.toString()),null!=n&&null!=n&&(n=n.toString()),Promise.resolve(u.getStates(e,r,n,o)).then(function(e){if(null!=e)return e})},function(e){console.error("Error requesting country states: ",e)});console.error("Error requesting country states: country name is required! please enter country name, iso3 or iso2")}())}catch(e){return Promise.reject(e)}},e.getSubRegions=function(e){try{return Promise.resolve(function(){if(e&&""!==e)return s(function(){return Promise.resolve(u.getRegionByName(e)).then(function(e){return function(){if(null!=e)return Promise.resolve(u.getSubRegion(e.id)).then(function(e){if(null!=e)return e})}()})},function(e){console.error("Error requesting subregions: ",e)});console.error("Error requesting subregions: region name is required!")}())}catch(e){return Promise.reject(e)}}});
//# sourceMappingURL=index.umd.js.map

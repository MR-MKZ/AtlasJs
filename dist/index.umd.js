!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports,require("axios"),require("fs")):"function"==typeof define&&define.amd?define(["exports","axios","fs"],r):r((e||self).atlas={},e.axios,e.fs)}(this,function(e,r,t){function n(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var o=/*#__PURE__*/n(r);function i(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,n=Array(r);t<r;t++)n[t]=e[t];return n}function s(e,r,t,n){return void 0===r&&(r="{}"),void 0===t&&(t="get"),void 0===n&&(n={}),o.default.request({method:t,maxBodyLength:Infinity,url:e,headers:n,data:r}).then(function(e){return e.data}).catch(function(e){return{error:!0,msg:e}})}var u=new(/*#__PURE__*/function(){function e(){}var r=e.prototype;return r.getRegions=function(){try{return Promise.resolve(function(e,r){try{var n=Promise.resolve(t.promises.readFile("./assets/regions.json","utf8")).then(JSON.parse)}catch(e){return r(e)}return n&&n.then?n.then(void 0,r):n}(0,function(e){console.error("Error reading JSON file:",e)}))}catch(e){return Promise.reject(e)}},r.getRegionById=function(e){return Promise.resolve()},r.getRegionByName=function(e){return Promise.resolve()},e}());e.getAllCapitals=function(e){try{return Promise.resolve(function(){if(e&&""!==e){var t=JSON.stringify({country:e});return Promise.resolve(s("https://countriesnow.space/api/v0.1/countries/capital",t,"post",{"Content-Type":"application/json"})).then(function(t){return t.error?r.isAxiosError(t.msg)&&t.msg.response&&404==t.msg.response.status?{error:!0,msg:"Country "+e+" is not exist!"}:void 0:t.data})}return Promise.resolve(s("https://countriesnow.space/api/v0.1/countries/capital")).then(function(e){return e.error?{error:!0,msg:e.msg}:e.data})}())}catch(e){return Promise.reject(e)}},e.getAllCountries=function(e,r,t){try{var n=[],o=[];e&&n.push("flag"),r&&n.push("currency"),t&&n.push("dialCode");var u=n.length>0?"https://countriesnow.space/api/v0.1/countries/info?returns="+n.join(","):"https://countriesnow.space/api/v0.1/countries/positions";return Promise.resolve(s(u)).then(function(e){if(e.error)return{error:!0,msg:e.msg};if(0==n.length){for(var r,t=function(e,r){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(t)return(t=t.call(e)).next.bind(t);if(Array.isArray(e)||(t=function(e,r){if(e){if("string"==typeof e)return i(e,r);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?i(e,r):void 0}}(e))){t&&(e=t);var n=0;return function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(e.data);!(r=t()).done;)o.push(r.value.name);return o}return e.data})}catch(e){return Promise.reject(e)}},e.getAllRegions=function(){try{return Promise.resolve(function(e,r){try{var t=Promise.resolve(u.getRegions())}catch(e){return r(e)}return t&&t.then?t.then(void 0,r):t}(0,function(e){console.error("Error getting regions: ",e)}))}catch(e){return Promise.reject(e)}}});
//# sourceMappingURL=index.umd.js.map
